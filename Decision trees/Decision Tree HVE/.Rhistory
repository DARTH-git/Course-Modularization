evsi
calc_evsi
evsi <- calc_evsi(n = 200,pop = 3000, n0 = 20, psa = l_psa ,
wtp = v_wtp,
params = c("p_HVE"),
outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2)
evsi
v_wtp
evsi <- calc_evsi(n = 200,pop = 1, n0 = 20, psa = l_psa ,
wtp = v_wtp,
params = c("p_HVE"),
outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2)
evsi
calc_evppi(psa = l_psa , wtp = 20000, params = c("p_HVE"), outcome = c("nmb", "nhb"),
type = c("gam", "poly"),
poly.order = 2,
k = -1,
pop = 1
)
calc_evppi(psa = l_psa , wtp = v_wtp, params = c("p_HVE", "q_VE_comp", "q_loss_biopsy"), outcome = c("nmb", "nhb"),
type = c("gam", "poly"),
poly.order = 2,
k = -1,
pop = 1
)
evppi
evppi <- calc_evppi(psa = l_psa , wtp = v_wtp, params = c("p_HVE", "q_VE_comp", "q_loss_biopsy"), outcome = c("nmb", "nhb"),
type = c("gam", "poly"),
poly.order = 2,
k = -1,
pop = 1
)
evppi
plot.evppi(evppi)
dampack::plot.evppi(evppi)
dampack:::plot.evppi(evppi)
evppi <- calc_evppi(psa = l_psa , wtp = v_wtp, params = c( "q_loss_biopsy"), outcome = c("nmb", "nhb"),
type = c("gam", "poly"),
poly.order = 2,
k = -1,
pop = 1
)
dampack:::plot.evppi(evppi)
evppi <- calc_evppi(psa = l_psa , wtp = v_wtp, params = c("q_VE_comp"), outcome = c("nmb", "nhb"),
type = c("gam", "poly"),
poly.order = 2,
k = -1,
pop = 1
)
dampack:::plot.evppi(evppi)
evsi <- calc_evsi(n = 200,pop = 1, n0 = 20, psa = l_psa ,
wtp = v_wtp,
params = c("q_VE_comp"),
outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2)
evsi
dampack:::plot.evsi(evsi)
evsi <- calc_evsi(n = 20,pop = 1, n0 = 20, psa = l_psa ,
wtp = v_wtp,
params = c("q_VE_comp"),
outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2)
dampack:::plot.evsi(evsi)
dampack:::plot.evppi(evppi)
evppi <- calc_evppi(psa = l_psa , wtp = v_wtp, params = c("q_VE_comp"), outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2,
k = -1,
pop = 1
)
dampack:::plot.evppi(evppi)
calc_evsi
evsi
calc_evsi
evsi$WTP
evsi$EVSI
dampack:::plot.evsi
g <- ggplot(data = evsi, aes_(x = as.name("n"), y = as.name("EVSI"))) +
xlab("Additional Sample Size")
g
g + geom_line()
evsi <- calc_evsi(n = 20:200,pop = 1, n0 = 20, psa = l_psa ,
wtp = v_wtp,
params = c("q_VE_comp"),
outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2)
evsi <- calc_evsi(n = seq(20,200,20),pop = 1, n0 = 20, psa = l_psa ,
wtp = v_wtp,
params = c("q_VE_comp"),
outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2)
evsi
dampack:::plot.evsi(evsi)
evsi <- calc_evsi(n = 90,pop = 1, n0 = 20, psa = l_psa ,
wtp = v_wtp,
params = c("q_VE_comp"),
outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2)
dampack:::plot.evsi(evsi)
v_wtp
plot.evsi
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "scales", "ellipse", "ggplot2", "lazyeval", "igraph", "truncnorm", "ggraph", "reshape2", "knitr", "stringr")
# load (install if required) packages from GitHub
# install_github("DARTH-git/dampack", force = TRUE) Uncomment if there is a newer version
# install_github("DARTH-git/dectree", force = TRUE) Uncomment if there is a newer version
install_github("annaheath/EVSI", force = TRUE) #Uncomment if there is a newer version
p_load_gh("DARTH-git/dampack", "DARTH-git/dectree")
p_load_gh("annaheath/EVSI")
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "scales", "ellipse", "ggplot2", "lazyeval", "igraph", "truncnorm", "ggraph", "reshape2", "knitr", "stringr")
# load (install if required) packages from GitHub
# install_github("DARTH-git/dampack", force = TRUE) Uncomment if there is a newer version
# install_github("DARTH-git/dectree", force = TRUE) Uncomment if there is a newer version
install_github("annaheath/EVSI", force = TRUE) #Uncomment if there is a newer version
p_load_gh("DARTH-git/dampack", "DARTH-git/dectree")
p_load_gh("annaheath/EVSI")
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "scales", "ellipse", "ggplot2", "lazyeval", "igraph", "truncnorm", "ggraph", "reshape2", "knitr", "stringr")
# load (install if required) packages from GitHub
# install_github("DARTH-git/dampack", force = TRUE) Uncomment if there is a newer version
# install_github("DARTH-git/dectree", force = TRUE) Uncomment if there is a newer version
# install_github("annaheath/EVSI", force = TRUE) #Uncomment if there is a newer version
p_load_gh("DARTH-git/dampack", "DARTH-git/dectree")
p_load_gh("annaheath/EVSI")
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "scales", "ellipse", "ggplot2", "lazyeval", "igraph", "truncnorm", "ggraph", "reshape2", "knitr", "stringr")
# load (install if required) packages from GitHub
# install_github("DARTH-git/dampack", force = TRUE) Uncomment if there is a newer version
# install_github("DARTH-git/dectree", force = TRUE) Uncomment if there is a newer version
# install_github("annaheath/EVSI", force = TRUE) #Uncomment if there is a newer version
p_load_gh("DARTH-git/dampack", "DARTH-git/dectree")
p_load_gh("annaheath/EVSI")
source(here('functions','Functions.R'))
v_names_str   <- c("No Tx", "Tx All", "Biopsy")    # names of strategies
n_str         <- length(v_names_str)               # number of strategies
wtp           <- 100000                            # willingness to pay threshold
# Probabilities
p_HVE         <- 0.52   # prevalence of HVE
p_HVE_comp    <- 0.71   # complications with untreated HVE
p_OVE_comp    <- 0.01   # complications with untreated OVE
p_HVE_comp_tx <- 0.36   # complications with treated HVE
p_OVE_comp_tx <- 0.20   # complications with treated OVE
p_biopsy_comp <- 0.05   # probability of complications due to biopsy
# Costs
c_VE          <- 1200   # cost of viral encephalitis care without complications
c_VE_comp     <- 9000   # cost of viral encephalitis care with complications
c_tx          <- 9500   # cost of treatment
c_biopsy      <- 25000  # cost of brain biopsy
# QALYs
q_VE          <- 20     # remaining QALYs for those without VE-related complications
q_VE_comp     <- 19     # remaining QALYs for those with VE-related complications
q_loss_biopsy <- -0.01  # one-time QALY loss due to brain biopsy
# store the parameters into a list
l_params_all <- as.list(data.frame(p_HVE, p_HVE_comp, p_OVE_comp, p_HVE_comp_tx, p_OVE_comp_tx, p_biopsy_comp,
c_VE, c_VE_comp, c_tx, c_biopsy,
q_VE, q_VE_comp, q_loss_biopsy))
# store the names of the parameters into a vector
v_names_params <- c('p_HVE', 'p_HVE_comp', 'p_OVE_comp', 'p_HVE_comp_tx', 'p_OVE_comp_tx', 'p_biopsy_comp',
'c_VE', 'c_VE_comp',  'c_tx', 'c_biopsy', 'q_VE', 'q_VE_comp', 'q_loss_biopsy')
decision_tree_HVE_output <- with(as.list(l_params_all), {
# Create vector of weights for each strategy
v_w_no_tx  <- c(  p_HVE  *    p_HVE_comp  ,  # HVE, complications
p_HVE  * (1-p_HVE_comp) ,  # HVE, no complications
(1-p_HVE) *    p_OVE_comp  ,  # OVE, complications
(1-p_HVE) * (1-p_OVE_comp))   # OVE, no complications
v_w_tx     <- c(  1                          ,  # On treatment
p_HVE  *    p_HVE_comp_tx  ,  # HVE w/tx, complications
p_HVE  * (1-p_HVE_comp_tx) ,  # HVE w/tx, no complications
(1-p_HVE) *    p_OVE_comp_tx  ,  # OVE w/tx, complications
(1-p_HVE) * (1-p_OVE_comp_tx))   # OVE w/tx, no complications
v_w_biopsy <- c(  1                                              , # Undergo biopsy
p_biopsy_comp                                  , # biopsy complications
# no biopsy comp., HVE w/tx,  complications
(1-p_biopsy_comp) *    p_HVE  *    p_HVE_comp_tx  ,
# no biopsy comp., HVE w/tx, no complications
(1-p_biopsy_comp) *    p_HVE  * (1-p_HVE_comp_tx) ,
# no biopsy comp., OVE, complications
(1-p_biopsy_comp) * (1-p_HVE) *    p_OVE_comp     ,
# no biopsy comp., OVE, no complications
(1-p_biopsy_comp) * (1-p_HVE) * (1-p_OVE_comp))
# Create vector of outcomes (QALYs) for each strategy
v_qaly_no_tx  <- c(q_VE_comp ,  # HVE, complications
q_VE      ,  # HVE, no complications
q_VE_comp ,  # OVE, complications
q_VE)        # OVE, no complications
v_qaly_tx     <- c(0      ,     # treatment does not directly add any QALYs
q_VE_comp ,  # HVE, complications
q_VE      ,  # HVE, no complications
q_VE_comp ,  # OVE, complications
q_VE)        # OVE, no complications
v_qaly_biopsy <- c(q_loss_biopsy  ,  # loss due to biopsy
q_VE_comp      ,  # biopsy complications
q_VE_comp      ,  # no biopsy comp., HVE w/tx, complications
q_VE           ,  # no biopsy comp., HVE w/tx, no complications
q_VE_comp      ,  # no biopsy comp., OVE, complications
q_VE)             # no biopsy comp., OVE, no complications
# Create vector of costs for each strategy
v_cost_no_tx  <- c(c_VE_comp ,  # HVE, complications
c_VE      ,  # HVE, no complications
c_VE_comp ,  # OVE, complications
c_VE)        # OVE, no complications
v_cost_tx     <- c(c_tx      ,  # cost of treatment
c_VE_comp ,  # HVE, complications
c_VE      ,  # HVE, no complications
c_VE_comp ,  # OVE, complications
c_VE)        # OVE, no complications
v_cost_biopsy <- c(c_biopsy         ,  # cost of biopsy procedure
c_VE_comp        ,  # biopsy complications
c_VE_comp + c_tx ,  # no biopsy comp., HVE w/tx, complications
c_VE + c_tx      ,  # no biopsy comp., HVE w/tx, no complications
c_VE_comp        ,  # no biopsy comp., OVE, complications
c_VE)               # no biopsy comp., OVE, no complications
# Calculate total utilities for each strategy
total_qaly_no_tx  <- v_w_no_tx  %*%  v_qaly_no_tx
total_qaly_tx     <- v_w_tx     %*%  v_qaly_tx
total_qaly_biopsy <- v_w_biopsy %*%  v_qaly_biopsy
# Calculate total costs for each strategy
total_cost_no_tx  <- v_w_no_tx  %*%  v_cost_no_tx
total_cost_tx     <- v_w_tx     %*%  v_cost_tx
total_cost_biopsy <- v_w_biopsy %*%  v_cost_biopsy
# vector of total QALYs
v_total_qaly <- c(total_qaly_no_tx, total_qaly_tx, total_qaly_biopsy)
# vector of total costs
v_total_cost <- c(total_cost_no_tx, total_cost_tx, total_cost_biopsy)
# calculate vector of nmb
v_nmb        <- v_total_qaly * wtp - v_total_cost
# Name outcomes
names(v_total_qaly) <- v_names_str  # names for the elements of the total QALYs vector
names(v_total_cost) <- v_names_str  # names for the elements of the total cost vector
names(v_nmb)        <- v_names_str  # names for the elements of the nmb vector
df_output <- data.frame(Strategy =  v_names_str,
Cost     =  v_total_cost,
Effect   =  v_total_qaly,
NMB      =  v_nmb)
return(df_output)
})
# model output
decision_tree_HVE_output
branches <- read.csv(here('data','decision_tree_HVE_branches.csv'), stringsAsFactors = F, header = T)
tree     <- create_tree(branches)
# plot_tree(tree, font.size = 5)
# create the transition probability matrix for NO treatment
decision_tree_HVE_cea  <- calculate_icers(cost       = decision_tree_HVE_output$Cost,
effect     = decision_tree_HVE_output$Effect,
strategies = decision_tree_HVE_output$Strategy)
decision_tree_HVE_cea
plot(decision_tree_HVE_cea, effect_units = "QALYs")
#### We wrapped the decision tree in a function which we called calculate_ce_out
# This function is stored in "Functions_decision_tree_HVE.R" and needes the list of parameters
source(here("functions", "Functions_decision_tree_HVE.R"))
# Test function to see if it gives the CE results
calculate_ce_out(l_params_all)
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_owsa  <- data.frame(pars = params_owsa, min = rep(NA, length(params_owsa )),  max  = rep(NA, length(params_owsa )))
params_all_owsa  <- data.frame(pars = params_owsa, min = rep(NA, length(params_owsa )),  max  = rep(NA, length(params_owsa )))
params_owsa   <- c("p_HVE", "p_biopsy_comp", "c_tx", "c_biopsy") # parameters of interest for OWSA
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_owsa  <- data.frame(pars = params_owsa, min = rep(NA, length(params_owsa )),  max  = rep(NA, length(params_owsa )))
params_all_owsa$min[params_all_owsa$pars %in% params_owsa] <- c(0.01, 0.01,  1000, 10000)  # min parameter values
params_all_owsa$max[params_all_owsa$pars %in% params_owsa] <- c(0.99, 0.50, 15000, 40000)  # max parameter values
owsa_nmb         <- run_owsa_det(params_range = subset(params_all_owsa, select = c("pars", "min", "max")) ,  # dataframe containing relevant parameter values
params_basecase = l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
params_all_owsa
params_all_owsa
round(params_all_owsa)
options(scipen = 999) # disabling scientific notation in R
params_all_owsa
owsa_nmb         <- run_owsa_det(params_range = subset(params_all_owsa, select = c("pars", "min", "max")) ,  # dataframe containing relevant parameter values
params_basecase = l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
plot(owsa_nmb, txtsize = 16, n_x_ticks = 5,
facet_scales = "free") +
theme(legend.position = "bottom")
?calculate_ce_out
calculate_ce_out()
calculate_ce_out
calculate_ce_out(l_params_all)
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_owsa  <- data.frame(pars = params_owsa, min = rep(NA, length(params_owsa )),  max  = rep(NA, length(params_owsa )))
params_all_owsa$min[params_all_owsa$pars %in% params_owsa] <- c(0.01, 0.01,  1000, 10000)  # min parameter values
params_all_owsa$max[params_all_owsa$pars %in% params_owsa] <- c(0.99, 0.50, 15000, 40000)  # max parameter values
owsa_nmb         <- run_owsa_det(params_range = subset(params_all_owsa, select = c("pars", "min", "max")) ,  # dataframe containing relevant parameter values
params_basecase = l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
owsa_opt_strat(owsa = owsa_nmb)
owsa_tornado(owsa = owsa_nmb)
params_twsa
params_twsa     <- c("p_HVE", "c_tx") # parameters of interest for TWSA
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_twsa <- data.frame(pars = params_twsa, min = rep(NA, length(params_twsa )), max  = rep(NA, length(params_twsa )))
params_all_twsa
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_twsa <- data.frame(pars = params_twsa, min = rep(NA, length(params_twsa )), max  = rep(NA, length(params_twsa )))
params_all_twsa$min[params_all_twsa$pars %in% params_twsa] <- c(0.01, 2000)   # min parameter values
params_all_twsa$max[params_all_twsa$pars %in% params_twsa] <- c(0.99, 40000)  # max parameter values
twsa_nmb        <- run_twsa_det(params_range = params_all_twsa, # parameters of interest
params_basecase = l_params_all,  # dataframe containing relevant parameter values
nsamp      = 40,               # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the twsa on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
plot(twsa_nmb) +
ggtitle(label = "Two-way sensitivity analysis", subtitle = "Net monetary benefit") +
theme(legend.position = "bottom")
# Function to generate PSA input dataset
generate_psa_params <- function(n_sim = 1000, seed = 071518){
set.seed(seed)
# Dataframe of input parameters
df_psa_params   <- data.frame(
# Transition probabilities (per cycle)
p_HVE         = rbeta(n_sim, 52, 48),  # prevalence of HVE
p_HVE_comp    = rbeta(n_sim, 71, 29),  # complications with untreated HVE
p_OVE_comp    = rbeta(n_sim,  1, 99),  # complications with untreated OVE
p_HVE_comp_tx = rbeta(n_sim, 36, 64),  # complications with treated HVE
p_OVE_comp_tx = rbeta(n_sim, 20, 80),  # complications with treated OVE
p_biopsy_comp = rbeta(n_sim,  1, 19),  # probability of complications due to biopsy
# Costs
c_VE          = rgamma(n_sim, shape = 36, scale = 33.33),    # cost of remaining one cycle in state H
c_VE_comp     = rgamma(n_sim, shape = 81, scale = 111.1),    # cost of remaining one cycle in state S1
c_tx          = rgamma(n_sim, shape = 74.6, scale = 127.4),  # cost of remaining one cycle in state S2
c_biopsy      = rgamma(n_sim, shape = 25, scale = 1000),     # cost of treatment (per cycle)
# Utilities
q_VE          = rnorm(n_sim, mean = 20, sd = 1),  # utility when healthy
q_VE_comp     = rnorm(n_sim, mean = 19, sd = 2),  # utility when sick
q_loss_biopsy = -rbeta(n_sim, shape1 = 4, shape2 = 380)
)
return(df_psa_params)
}
generate_psa_params(10)
generate_psa_params(10)
# Number of simulations
n_sim <- 1000
# Generate PSA input dataset
df_psa_input     <- generate_psa_params(n_sim = n_sim)
# Histogram of parameters
ggplot(melt(df_psa_input, variable.name = "Parameter"), aes(x = value)) +
facet_wrap(~Parameter, scales = "free") +
geom_histogram(aes(y = ..density..)) +
theme_bw(base_size = 16)
# Initialize dataframes with PSA output
# Dataframe of costs
df_c <- as.data.frame(matrix(0,
nrow = n_sim,
ncol = n_str))
colnames(df_c) <- v_names_str
# Dataframe of effectiveness
df_e <- as.data.frame(matrix(0,
nrow = n_sim,
ncol = n_str))
colnames(df_e) <- v_names_str
# Run decision tree on each parameter set of PSA input dataset
for(i in 1:n_sim){
df_out_temp <- calculate_ce_out(df_psa_input[i, ])
df_c[i, ] <- df_out_temp$Cost
df_e[i, ] <- df_out_temp$Effect
# Display simulation progress
if(i/(n_sim/10) == round(i/(n_sim/10),0)) { # display progress every 10%
cat('\r', paste(i/n_sim * 100, "% done", sep = " "))
}
}
df_c
l_psa <- make_psa_obj(cost          = df_c,
effectiveness = df_e,
parameters    = df_psa_input,
strategies    = v_names_str)
head(l_psa)
save(df_psa_input, df_c, df_e, v_names_str, n_str,
l_psa,
file = here("output", "decision_tree_HVE_PSA_dataset.RData"))
load(file = here("output", "decision_tree_HVE_PSA_dataset.RData"))
v_wtp <- seq(0, 300000, by = 10000)
plot(l_psa)
# Compute expected costs and effects for each strategy from the PSA
df_out_ce_psa <- summary(l_psa)
df_out_ce_psa
# Calculate incremental cost-effectiveness ratios (ICERs)
df_cea_psa <- calculate_icers(cost       = df_out_ce_psa$meanCost,
effect     = df_out_ce_psa$meanEffect,
strategies = df_out_ce_psa$Strategy)
df_cea_psa
# Save CEA table with ICERs
# As .RData
save(df_cea_psa,
file = here("tables", "decision_tree_HVE_probabilistic_CEA_results.RData"))
# As .csv
write.csv(df_cea_psa,
file = here("tables", "decision_tree_HVE_probabilistic_CEA_results.csv"))
df_cea_psa
plot(df_cea_psa)
ceac_obj <- ceac(wtp = v_wtp, psa = l_psa)
# Regions of highest probability of cost-effectiveness for each strategy
summary(ceac_obj)
# CEAC & CEAF plot
plot(ceac_obj)
elc_obj <- calc_exp_loss(wtp = v_wtp, psa = l_psa)
elc_obj
# ELC plot
plot(elc_obj, log_y = FALSE)
dampack:::plot.ceac()
?dampack:::plot.ceac
evpi <- calc_evpi(wtp = v_wtp, psa = l_psa)
# EVPI plot
plot(evpi, effect_units = "QALY")
evpi <- calc_evpi(wtp = v_wtp, psa = l_psa)
# EVPI plot
plot(evpi, effect_units = "QALY")
evppi <- calc_evppi(psa = l_psa , wtp = v_wtp, params = c("q_VE_comp"), outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2,
k = -1,
pop = 1
)
evppi <- calc_evppi(psa = l_psa, wtp = v_wtp, params = c("q_VE_comp"), outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2,
k = -1,
pop = 1
)
evppi <- calc_evppi(psa = l_psa, wtp = v_wtp, params = c("q_VE_comp"), outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2,
k = -1,
pop = 1
)
dampack:::plot.evppi(evppi)
evsi <- calc_evsi(n = seq(20,200,20),pop = 1, n0 = 20, psa = l_psa ,
wtp = v_wtp,
params = c("q_VE_comp"),
outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2)
dampack:::plot.evsi(evsi)
g <- ggplot(data = evsi, aes_(x = as.name("n"), y = as.name("EVSI"))) +
xlab("Additional Sample Size")
g + geom_line()
dampack:::plot.evsi(evsi)
v_wtp <- seq(0, 3000000, by = 100000)
# Compute expected costs and effects for each strategy from the PSA
df_out_ce_psa <- summary(l_psa)
df_out_ce_psa
# Calculate incremental cost-effectiveness ratios (ICERs)
df_cea_psa <- calculate_icers(cost       = df_out_ce_psa$meanCost,
effect     = df_out_ce_psa$meanEffect,
strategies = df_out_ce_psa$Strategy)
df_cea_psa
# Save CEA table with ICERs
# As .RData
save(df_cea_psa,
file = here("tables", "decision_tree_HVE_probabilistic_CEA_results.RData"))
# As .csv
write.csv(df_cea_psa,
file = here("tables", "decision_tree_HVE_probabilistic_CEA_results.csv"))
plot(df_cea_psa)
ceac_obj <- ceac(wtp = v_wtp, psa = l_psa)
# Regions of highest probability of cost-effectiveness for each strategy
summary(ceac_obj)
# CEAC & CEAF plot
plot(ceac_obj)
elc_obj <- calc_exp_loss(wtp = v_wtp, psa = l_psa)
elc_obj
# ELC plot
plot(elc_obj, log_y = FALSE)
evpi <- calc_evpi(wtp = v_wtp, psa = l_psa)
# EVPI plot
plot(evpi, effect_units = "QALY")
evppi <- calc_evppi(psa = l_psa, wtp = v_wtp, params = c("q_VE_comp"), outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2,
k = -1,
pop = 1
)
dampack:::plot.evppi(evppi)
evsi <- calc_evsi(n = seq(20,200,20),pop = 1, n0 = 20, psa = l_psa ,
wtp = v_wtp,
params = c("q_VE_comp"),
outcome = c("nmb"),
type = c("gam", "poly"),
poly.order = 2)
dampack:::plot.evsi(evsi)
g <- ggplot(data = evsi, aes_(x = as.name("n"), y = as.name("EVSI"))) +
xlab("Additional Sample Size")
g + geom_line()
