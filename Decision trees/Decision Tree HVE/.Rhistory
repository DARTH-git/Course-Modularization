# Calculate total costs for each strategy
total_cost_no_tx  <- v_w_no_tx  %*%  v_cost_no_tx
total_cost_tx     <- v_w_tx     %*%  v_cost_tx
total_cost_biopsy <- v_w_biopsy %*%  v_cost_biopsy
# vector of total QALYs
v_total_qaly <- c(total_qaly_no_tx, total_qaly_tx, total_qaly_biopsy)
# vector of total costs
v_total_cost <- c(total_cost_no_tx, total_cost_tx, total_cost_biopsy)
# calculate vector of nmb
v_nmb        <- v_total_qaly * wtp - v_total_cost
# Name outcomes
names(v_total_qaly) <- v_names_str  # names for the elements of the total QALYs vector
names(v_total_cost) <- v_names_str  # names for the elements of the total cost vector
names(v_nmb)        <- v_names_str  # names for the elements of the nmb vector
df_output <- data.frame(Strategy =  v_names_str,
Cost     =  v_total_cost,
Effect   =  v_total_qaly,
NMB      =  v_nmb)
return(df_output)
})
# model output
decision_tree_HVE_output
branches <- read.csv(here('data','decision_tree_HVE_branches.csv'), stringsAsFactors = F, header = T)
tree     <- create_tree(branches)
plot_tree(tree, font.size = 5)
estimate_tree(tree)
estimate_tree(tree, "outcome")
branches
branches <- read.csv(here('data','decision_tree_HVE_branches.csv'), stringsAsFactors = F, header = T)
tree     <- create_tree(branches)
plot_tree(tree, font.size = 5)
estimate_tree(tree, "outcome")
plot_tree(tree, font.size = 5)
plot_tree(tree, font.size = 5)
plot_tree(tree, font.size = 5)
x <- 3
y <- 4
df.xy <- data.frame(x=x, y = y)
df.xy
df.xy <- data.frame(ID=x, Age = y)
df.xy
x <- c(3,4)
y <- (4, 7)
df.xy <- data.frame(ID=x, Age = y)
x <- c(3,4)
y <- c(4, 7)
df.xy <- data.frame(ID=x, Age = y)
df.xy
mean(Age)
mean(df.xy$Age)
with(df.xy
mean(Age)
with(df.xy
{
mean(Age)
}
)
with(df.xy,
{
mean(Age)
}
)
with(data = df.xy,
{
mean(Age),
sd(Age)
}
)
with(data = df.xy,
{
mean(Age)
sd(Age)
}
)
with(data = df.xy,
{
print(mean(Age))
print(sd(Age))
}
)
v_names_str   <- c("No Tx", "Tx All", "Biopsy")    # names of strategies
n_str         <- length(v_names_str)               # number of strategies
wtp           <- 100000                            # willingness to pay threshold
# Probabilities
p_HVE         <- 0.52   # prevalence of HVE
p_HVE_comp    <- 0.71   # complications with untreated HVE
p_OVE_comp    <- 0.01   # complications with untreated OVE
p_HVE_comp_tx <- 0.36   # complications with treated HVE
p_biopsy_death <- 0.005   # probability of death due to biopsy
c_VE_comp     <- 9000   # cost of viral encephalitis care with complications
c_tx          <- 9500   # cost of treatment
v_names_str   <- c("No Tx", "Tx All", "Biopsy")    # names of strategies
n_str         <- length(v_names_str)               # number of strategies
wtp           <- 100000                            # willingness to pay threshold
# Probabilities
p_HVE         <- 0.52   # prevalence of HVE
p_HVE_comp    <- 0.71   # complications with untreated HVE
p_OVE_comp    <- 0.01   # complications with untreated OVE
p_HVE_comp_tx <- 0.36   # complications with treated HVE
p_OVE_comp_tx <- 0.20   # complications with treated OVE
p_biopsy_death <- 0.005   # probability of death due to biopsy
# Costs
c_VE          <- 1200   # cost of viral encephalitis care without complications
c_VE_comp     <- 9000   # cost of viral encephalitis care with complications
c_tx          <- 9500   # cost of treatment
c_biopsy      <- 25000  # cost of brain biopsy
# QALYs
q_VE           <- 20    # remaining QALYs for those without VE-related complications
q_VE_comp      <- 19    # remaining QALYs for those with VE-related complications
q_loss_biopsy  <- 0.01  # one-time  QALY loss due to brain biopsy
q_death_biopsy <- 0     # remaining QALYs for those who died during biopsy
# store the parameters into a list
l_params_all <- as.list(data.frame(p_HVE, p_HVE_comp, p_OVE_comp, p_HVE_comp_tx, p_OVE_comp_tx, p_biopsy_death,
c_VE, c_VE_comp, c_tx, c_biopsy,
q_VE, q_VE_comp, q_loss_biopsy))
# store the names of the parameters into a vector
v_names_params <- c('p_HVE', 'p_HVE_comp', 'p_OVE_comp', 'p_HVE_comp_tx', 'p_OVE_comp_tx', 'p_biopsy_death',
'c_VE', 'c_VE_comp',  'c_tx', 'c_biopsy', 'q_VE', 'q_VE_comp', 'q_loss_biopsy')
c( q_death_biopsy  ,  # biopsy complications
q_VE_comp       ,  # no biopsy comp., HVE w/tx, complications
q_VE            ,  # no biopsy comp., HVE w/tx, no complications
q_VE_comp       ,  # no biopsy comp., OVE, complications
q_VE)
- q_loss_biopsy +  # loss due to biopsy
c( q_death_biopsy  ,  # biopsy complications
q_VE_comp       ,  # no biopsy comp., HVE w/tx, complications
q_VE            ,  # no biopsy comp., HVE w/tx, no complications
q_VE_comp       ,  # no biopsy comp., OVE, complications
q_VE)
decision_tree_HVE_output <- with(as.list(l_params_all), {
# Create vector of weights for each strategy
v_w_no_tx  <- c(    p_HVE  *    p_HVE_comp  ,    # HVE, complications
p_HVE  * (1 - p_HVE_comp) ,  # HVE, no complications
(1 - p_HVE) *    p_OVE_comp  ,    # OVE, complications
(1 - p_HVE) * (1 - p_OVE_comp))   # OVE, no complications
v_w_tx     <- c(    p_HVE  *    p_HVE_comp_tx  ,   # HVE w/tx, complications
p_HVE  * (1 - p_HVE_comp_tx) , # HVE w/tx, no complications
(1 - p_HVE) *    p_OVE_comp_tx   ,  # OVE w/tx, complications
(1 - p_HVE) * (1 - p_OVE_comp_tx))  # OVE w/tx, no complications
v_w_biopsy <- c(p_biopsy_death                  , # biopsy death
# no biopsy death., HVE w/tx,  complications
(1-p_biopsy_death) *    p_HVE  *    p_HVE_comp_tx  ,
# no biopsy death., HVE w/tx, no complications
(1-p_biopsy_death) *    p_HVE  * (1-p_HVE_comp_tx) ,
# no biopsy death., OVE, complications
(1-p_biopsy_death) * (1-p_HVE) *      p_OVE_comp     ,
# no biopsy death., OVE, no complications
(1-p_biopsy_death) * (1-p_HVE) * (1 - p_OVE_comp))
# Create vector of outcomes (QALYs) for each strategy
v_qaly_no_tx  <- c(q_VE_comp ,  # HVE, complications
q_VE      ,  # HVE, no complications
q_VE_comp ,  # OVE, complications
q_VE)        # OVE, no complications
v_qaly_tx     <- c(q_VE_comp ,  # HVE, complications
q_VE      ,  # HVE, no complications
q_VE_comp ,  # OVE, complications
q_VE)        # OVE, no complications
v_qaly_biopsy <- - q_loss_biopsy +  # loss due to biopsy
c( q_death_biopsy  ,  # biopsy complications
q_VE_comp       ,  # no biopsy comp., HVE w/tx, complications
q_VE            ,  # no biopsy comp., HVE w/tx, no complications
q_VE_comp       ,  # no biopsy comp., OVE, complications
q_VE)              # no biopsy comp., OVE, no complications
# Create vector of costs for each strategy
v_cost_no_tx  <- c(c_VE_comp ,  # HVE, complications
c_VE      ,  # HVE, no complications
c_VE_comp ,  # OVE, complications
c_VE)        # OVE, no complications
v_cost_tx     <- c_tx +           # cost of treatment
c(c_VE_comp ,  # HVE, complications
c_VE      ,  # HVE, no complications
c_VE_comp ,  # OVE, complications
c_VE)        # OVE, no complications
v_cost_biopsy <- c_biopsy +           # cost of biopsy procedure
c(0                ,  # cost of death (zero)
c_VE_comp + c_tx ,  # no biopsy comp., HVE w/tx, complications
c_VE + c_tx      ,  # no biopsy comp., HVE w/tx, no complications
c_VE_comp        ,  # no biopsy comp., OVE, complications
c_VE)               # no biopsy comp., OVE, no complications
# Calculate total utilities for each strategy
total_qaly_no_tx  <- v_w_no_tx  %*%  v_qaly_no_tx
total_qaly_tx     <- v_w_tx     %*%  v_qaly_tx
total_qaly_biopsy <- v_w_biopsy %*%  v_qaly_biopsy
# Calculate total costs for each strategy
total_cost_no_tx  <- v_w_no_tx  %*%  v_cost_no_tx
total_cost_tx     <- v_w_tx     %*%  v_cost_tx
total_cost_biopsy <- v_w_biopsy %*%  v_cost_biopsy
# vector of total QALYs
v_total_qaly <- c(total_qaly_no_tx, total_qaly_tx, total_qaly_biopsy)
# vector of total costs
v_total_cost <- c(total_cost_no_tx, total_cost_tx, total_cost_biopsy)
# calculate vector of nmb
v_nmb        <- v_total_qaly * wtp - v_total_cost
# Name outcomes
names(v_total_qaly) <- v_names_str  # names for the elements of the total QALYs vector
names(v_total_cost) <- v_names_str  # names for the elements of the total cost vector
names(v_nmb)        <- v_names_str  # names for the elements of the nmb vector
df_output <- data.frame(Strategy =  v_names_str,
Cost     =  v_total_cost,
Effect   =  v_total_qaly,
NMB      =  v_nmb)
return(df_output)
})
# model output
decision_tree_HVE_output
# create the transition probability matrix for NO treatment
decision_tree_HVE_cea  <- calculate_icers(cost       = decision_tree_HVE_output$Cost,
effect     = decision_tree_HVE_output$Effect,
strategies = decision_tree_HVE_output$Strategy)
decision_tree_HVE_cea
plot(decision_tree_HVE_cea, effect_units = "QALYs")
plot(decision_tree_HVE_cea, effect_units = "QALYs")
branches <- read.csv(here('data','decision_tree_HVE_branches.csv'), stringsAsFactors = F, header = T)
tree     <- create_tree(branches)
plot_tree(tree, font.size = 5)
plot_tree(tree, font.size = 5)
estimate_tree(tree, "outcome")
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "scales", "ellipse", "ggplot2", "lazyeval", "igraph", "truncnorm", "ggraph", "reshape2", "knitr", "stringr")
# load (install if required) packages from GitHub
# install_github("DARTH-git/dampack", force = TRUE) Uncomment if there is a newer version
#install_github("DARTH-git/dectree", force = TRUE) #Uncomment if there is a newer version
p_load_gh("DARTH-git/dampack", "DARTH-git/dectree")
source(here('functions','Functions.R'))
v_names_str   <- c("No Tx", "Tx All", "Biopsy")    # names of strategies
n_str         <- length(v_names_str)               # number of strategies
wtp           <- 100000                            # willingness to pay threshold
# Probabilities
p_HVE         <- 0.52   # prevalence of HVE
p_HVE_comp    <- 0.71   # complications with untreated HVE
p_OVE_comp    <- 0.01   # complications with untreated OVE
p_HVE_comp_tx <- 0.36   # complications with treated HVE
p_OVE_comp_tx <- 0.20   # complications with treated OVE
p_biopsy_death <- 0.005   # probability of death due to biopsy
# Costs
c_VE          <- 1200   # cost of viral encephalitis care without complications
c_VE_comp     <- 9000   # cost of viral encephalitis care with complications
c_tx          <- 9500   # cost of treatment
c_biopsy      <- 25000  # cost of brain biopsy
# QALYs
q_VE           <- 20    # remaining QALYs for those without VE-related complications
q_VE_comp      <- 19    # remaining QALYs for those with VE-related complications
q_loss_biopsy  <- 0.01  # one-time  QALY loss due to brain biopsy
q_death_biopsy <- 0     # remaining QALYs for those who died during biopsy
# store the parameters into a list
l_params_all <- as.list(data.frame(p_HVE, p_HVE_comp, p_OVE_comp, p_HVE_comp_tx, p_OVE_comp_tx, p_biopsy_death,
c_VE, c_VE_comp, c_tx, c_biopsy,
q_VE, q_VE_comp, q_loss_biopsy))
# store the names of the parameters into a vector
v_names_params <- c('p_HVE', 'p_HVE_comp', 'p_OVE_comp', 'p_HVE_comp_tx', 'p_OVE_comp_tx', 'p_biopsy_death',
'c_VE', 'c_VE_comp',  'c_tx', 'c_biopsy', 'q_VE', 'q_VE_comp', 'q_loss_biopsy')
decision_tree_HVE_output <- with(as.list(l_params_all), {
# Create vector of weights for each strategy
v_w_no_tx  <- c(    p_HVE  *    p_HVE_comp  ,    # HVE, complications
p_HVE  * (1 - p_HVE_comp) ,  # HVE, no complications
(1 - p_HVE) *    p_OVE_comp  ,    # OVE, complications
(1 - p_HVE) * (1 - p_OVE_comp))   # OVE, no complications
v_w_tx     <- c(    p_HVE  *    p_HVE_comp_tx  ,   # HVE w/tx, complications
p_HVE  * (1 - p_HVE_comp_tx) , # HVE w/tx, no complications
(1 - p_HVE) *    p_OVE_comp_tx   ,  # OVE w/tx, complications
(1 - p_HVE) * (1 - p_OVE_comp_tx))  # OVE w/tx, no complications
v_w_biopsy <- c(p_biopsy_death                  , # biopsy death
# no biopsy death., HVE w/tx,  complications
(1-p_biopsy_death) *    p_HVE  *    p_HVE_comp_tx  ,
# no biopsy death., HVE w/tx, no complications
(1-p_biopsy_death) *    p_HVE  * (1-p_HVE_comp_tx) ,
# no biopsy death., OVE, complications
(1-p_biopsy_death) * (1-p_HVE) *      p_OVE_comp     ,
# no biopsy death., OVE, no complications
(1-p_biopsy_death) * (1-p_HVE) * (1 - p_OVE_comp))
# Create vector of outcomes (QALYs) for each strategy
v_qaly_no_tx  <- c(q_VE_comp ,  # HVE, complications
q_VE      ,  # HVE, no complications
q_VE_comp ,  # OVE, complications
q_VE)        # OVE, no complications
v_qaly_tx     <- c(q_VE_comp ,  # HVE, complications
q_VE      ,  # HVE, no complications
q_VE_comp ,  # OVE, complications
q_VE)        # OVE, no complications
v_qaly_biopsy <- - q_loss_biopsy +  # loss due to biopsy
c( q_death_biopsy  ,  # biopsy complications
q_VE_comp       ,  # no biopsy comp., HVE w/tx, complications
q_VE            ,  # no biopsy comp., HVE w/tx, no complications
q_VE_comp       ,  # no biopsy comp., OVE, complications
q_VE)              # no biopsy comp., OVE, no complications
# Create vector of costs for each strategy
v_cost_no_tx  <- c(c_VE_comp ,  # HVE, complications
c_VE      ,  # HVE, no complications
c_VE_comp ,  # OVE, complications
c_VE)        # OVE, no complications
v_cost_tx     <- c_tx +           # cost of treatment
c(c_VE_comp ,  # HVE, complications
c_VE      ,  # HVE, no complications
c_VE_comp ,  # OVE, complications
c_VE)        # OVE, no complications
v_cost_biopsy <- c_biopsy +           # cost of biopsy procedure
c(0                ,  # cost of death (zero)
c_VE_comp + c_tx ,  # no biopsy comp., HVE w/tx, complications
c_VE + c_tx      ,  # no biopsy comp., HVE w/tx, no complications
c_VE_comp        ,  # no biopsy comp., OVE, complications
c_VE)               # no biopsy comp., OVE, no complications
# Calculate total utilities for each strategy
total_qaly_no_tx  <- v_w_no_tx  %*%  v_qaly_no_tx
total_qaly_tx     <- v_w_tx     %*%  v_qaly_tx
total_qaly_biopsy <- v_w_biopsy %*%  v_qaly_biopsy
# Calculate total costs for each strategy
total_cost_no_tx  <- v_w_no_tx  %*%  v_cost_no_tx
total_cost_tx     <- v_w_tx     %*%  v_cost_tx
total_cost_biopsy <- v_w_biopsy %*%  v_cost_biopsy
# vector of total QALYs
v_total_qaly <- c(total_qaly_no_tx, total_qaly_tx, total_qaly_biopsy)
# vector of total costs
v_total_cost <- c(total_cost_no_tx, total_cost_tx, total_cost_biopsy)
# calculate vector of nmb
v_nmb        <- v_total_qaly * wtp - v_total_cost
# Name outcomes
names(v_total_qaly) <- v_names_str  # names for the elements of the total QALYs vector
names(v_total_cost) <- v_names_str  # names for the elements of the total cost vector
names(v_nmb)        <- v_names_str  # names for the elements of the nmb vector
df_output <- data.frame(Strategy =  v_names_str,
Cost     =  v_total_cost,
Effect   =  v_total_qaly,
NMB      =  v_nmb)
return(df_output)
})
# model output
decision_tree_HVE_output
branches <- read.csv(here('data','decision_tree_HVE_branches.csv'), stringsAsFactors = F, header = T)
tree     <- create_tree(branches)
plot_tree(tree, font.size = 5)
estimate_tree(tree, "outcome")
# create the transition probability matrix for NO treatment
decision_tree_HVE_cea  <- calculate_icers(cost       = decision_tree_HVE_output$Cost,
effect     = decision_tree_HVE_output$Effect,
strategies = decision_tree_HVE_output$Strategy)
decision_tree_HVE_cea
plot(decision_tree_HVE_cea, effect_units = "QALYs")
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "scales", "ellipse", "ggplot2", "lazyeval", "igraph", "truncnorm", "ggraph", "reshape2", "knitr", "stringr")
# load (install if required) packages from GitHub
# install_github("DARTH-git/dampack", force = TRUE) Uncomment if there is a newer version
#install_github("DARTH-git/dectree", force = TRUE) #Uncomment if there is a newer version
p_load_gh("DARTH-git/dampack", "DARTH-git/dectree")
source(here('functions','Functions.R'))
v_names_str   <- c("No Tx", "Tx All", "Biopsy")    # names of strategies
n_str         <- length(v_names_str)               # number of strategies
wtp           <- 100000                            # willingness to pay threshold
# Probabilities
p_HVE         <- 0.52   # prevalence of HVE
p_HVE_comp    <- 0.71   # complications with untreated HVE
p_OVE_comp    <- 0.01   # complications with untreated OVE
p_HVE_comp_tx <- 0.36   # complications with treated HVE
p_OVE_comp_tx <- 0.20   # complications with treated OVE
p_biopsy_death <- 0.005   # probability of death due to biopsy
# Costs
c_VE          <- 1200   # cost of viral encephalitis care without complications
c_VE_comp     <- 9000   # cost of viral encephalitis care with complications
c_tx          <- 9500   # cost of treatment
c_biopsy      <- 25000  # cost of brain biopsy
# QALYs
q_VE           <- 20    # remaining QALYs for those without VE-related complications
q_VE_comp      <- 19    # remaining QALYs for those with VE-related complications
q_loss_biopsy  <- 0.01  # one-time  QALY loss due to brain biopsy
q_death_biopsy <- 0     # remaining QALYs for those who died during biopsy
# store the parameters into a list
l_params_all <- as.list(data.frame(p_HVE, p_HVE_comp, p_OVE_comp, p_HVE_comp_tx, p_OVE_comp_tx, p_biopsy_death,
c_VE, c_VE_comp, c_tx, c_biopsy,
q_VE, q_VE_comp, q_loss_biopsy))
# store the names of the parameters into a vector
v_names_params <- c('p_HVE', 'p_HVE_comp', 'p_OVE_comp', 'p_HVE_comp_tx', 'p_OVE_comp_tx', 'p_biopsy_death',
'c_VE', 'c_VE_comp',  'c_tx', 'c_biopsy', 'q_VE', 'q_VE_comp', 'q_loss_biopsy')
decision_tree_HVE_output <- with(as.list(l_params_all), {
# Create vector of weights for each strategy
v_w_no_tx  <- c(    p_HVE  *    p_HVE_comp  ,    # HVE, complications
p_HVE  * (1 - p_HVE_comp) ,  # HVE, no complications
(1 - p_HVE) *    p_OVE_comp  ,    # OVE, complications
(1 - p_HVE) * (1 - p_OVE_comp))   # OVE, no complications
v_w_tx     <- c(    p_HVE  *    p_HVE_comp_tx  ,   # HVE w/tx, complications
p_HVE  * (1 - p_HVE_comp_tx) , # HVE w/tx, no complications
(1 - p_HVE) *    p_OVE_comp_tx   ,  # OVE w/tx, complications
(1 - p_HVE) * (1 - p_OVE_comp_tx))  # OVE w/tx, no complications
v_w_biopsy <- c(p_biopsy_death                  , # biopsy death
# no biopsy death., HVE w/tx,  complications
(1-p_biopsy_death) *    p_HVE  *    p_HVE_comp_tx  ,
# no biopsy death., HVE w/tx, no complications
(1-p_biopsy_death) *    p_HVE  * (1-p_HVE_comp_tx) ,
# no biopsy death., OVE, complications
(1-p_biopsy_death) * (1-p_HVE) *      p_OVE_comp     ,
# no biopsy death., OVE, no complications
(1-p_biopsy_death) * (1-p_HVE) * (1 - p_OVE_comp))
# Create vector of outcomes (QALYs) for each strategy
v_qaly_no_tx  <- c(q_VE_comp ,  # HVE, complications
q_VE      ,  # HVE, no complications
q_VE_comp ,  # OVE, complications
q_VE)        # OVE, no complications
v_qaly_tx     <- c(q_VE_comp ,  # HVE, complications
q_VE      ,  # HVE, no complications
q_VE_comp ,  # OVE, complications
q_VE)        # OVE, no complications
v_qaly_biopsy <- - q_loss_biopsy +  # loss due to biopsy
c( q_death_biopsy  ,  # biopsy complications
q_VE_comp       ,  # no biopsy comp., HVE w/tx, complications
q_VE            ,  # no biopsy comp., HVE w/tx, no complications
q_VE_comp       ,  # no biopsy comp., OVE, complications
q_VE)              # no biopsy comp., OVE, no complications
# Create vector of costs for each strategy
v_cost_no_tx  <- c(c_VE_comp ,  # HVE, complications
c_VE      ,  # HVE, no complications
c_VE_comp ,  # OVE, complications
c_VE)        # OVE, no complications
v_cost_tx     <- c_tx +           # cost of treatment
c(c_VE_comp ,  # HVE, complications
c_VE      ,  # HVE, no complications
c_VE_comp ,  # OVE, complications
c_VE)        # OVE, no complications
v_cost_biopsy <- c_biopsy +           # cost of biopsy procedure
c(0                ,  # cost of death (zero)
c_VE_comp + c_tx ,  # no biopsy comp., HVE w/tx, complications
c_VE + c_tx      ,  # no biopsy comp., HVE w/tx, no complications
c_VE_comp        ,  # no biopsy comp., OVE, complications
c_VE)               # no biopsy comp., OVE, no complications
# Calculate total utilities for each strategy
total_qaly_no_tx  <- v_w_no_tx  %*%  v_qaly_no_tx
total_qaly_tx     <- v_w_tx     %*%  v_qaly_tx
total_qaly_biopsy <- v_w_biopsy %*%  v_qaly_biopsy
# Calculate total costs for each strategy
total_cost_no_tx  <- v_w_no_tx  %*%  v_cost_no_tx
total_cost_tx     <- v_w_tx     %*%  v_cost_tx
total_cost_biopsy <- v_w_biopsy %*%  v_cost_biopsy
# vector of total QALYs
v_total_qaly <- c(total_qaly_no_tx, total_qaly_tx, total_qaly_biopsy)
# vector of total costs
v_total_cost <- c(total_cost_no_tx, total_cost_tx, total_cost_biopsy)
# calculate vector of nmb
v_nmb        <- v_total_qaly * wtp - v_total_cost
# Name outcomes
names(v_total_qaly) <- v_names_str  # names for the elements of the total QALYs vector
names(v_total_cost) <- v_names_str  # names for the elements of the total cost vector
names(v_nmb)        <- v_names_str  # names for the elements of the nmb vector
df_output <- data.frame(Strategy =  v_names_str,
Cost     =  v_total_cost,
Effect   =  v_total_qaly,
NMB      =  v_nmb)
return(df_output)
})
# model output
decision_tree_HVE_output
branches <- read.csv(here('data','decision_tree_HVE_branches.csv'), stringsAsFactors = F, header = T)
tree     <- create_tree(branches)
plot_tree(tree, font.size = 5)
estimate_tree(tree, "outcome")
# create the transition probability matrix for NO treatment
decision_tree_HVE_cea  <- calculate_icers(cost       = decision_tree_HVE_output$Cost,
effect     = decision_tree_HVE_output$Effect,
strategies = decision_tree_HVE_output$Strategy)
decision_tree_HVE_cea
plot(decision_tree_HVE_cea, effect_units = "QALYs")
rm(list = ls())      # clear memory (removes all the variables from the workspace)
# no packages required
# no functions required
# Strategy names
v_names_str <- c("Base Case")
# Number of strategies
n_str <- length(v_names_str)
# Markov model parameters
v_n  <- c("Healthy", "Sick", "Dead")    # state names
n_states  <- length(v_n)                # number of states
n_t  <- 60                              # number of cycles
p_HD <- 0.02                            # probability to die when healthy
p_HS <- 0.05                            # probability to become sick when healthy
p_SD <- 0.1                             # probability to die when sick
# Costs and utilities
c_H  <- 400                             # cost of remaining one cycle healthy
c_S  <- 1000                            # cost of remaining one cycle sick
c_D  <- 0                               # cost of remaining one cycle dead
u_H  <- 0.8                             # utility when healthy
u_S  <- 0.5                             # utility when sick
u_D  <- 0                               # utility when dead
d_e  <- d_c <- 0.03                     # equal discount of costs and QALYs by 3%
# calculate discount weights for costs for each cycle based on discount rate d_c
v_dwc <- 1 / (1 + d_e) ^ (0:n_t)
# calculate discount weights for effectiveness for each cycle based on discount rate d_e
v_dwe <- 1 / (1 + d_c) ^ (0:n_t)
tmat <- matrix(0, nrow = n_states, ncol = n_states, dimnames = list(v_n, v_n))
tmat["Healthy","Sick" ]  = ""
tmat["Healthy","Dead" ]  = ""
tmat["Healthy","Healthy" ]  = ""
tmat["Sick","Dead" ]  = ""
tmat["Sick","Sick" ]  = ""
tmat["Dead", "Dead" ]  = ""
layout.fig <- c(2, 1)
plotmat(t(tmat), t(layout.fig), self.cex = 0.5, curve = 0, arr.pos = 0.8,
latex = T, arr.type = "curved", relsize = 0.85, box.prop=0.8,
cex = 0.8, box.cex = 0.7, lwd = 1)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("diagram")
tmat <- matrix(0, nrow = n_states, ncol = n_states, dimnames = list(v_n, v_n))
tmat["Healthy","Sick" ]  = ""
tmat["Healthy","Dead" ]  = ""
tmat["Healthy","Healthy" ]  = ""
tmat["Sick","Dead" ]  = ""
tmat["Sick","Sick" ]  = ""
tmat["Dead", "Dead" ]  = ""
layout.fig <- c(2, 1)
plotmat(t(tmat), t(layout.fig), self.cex = 0.5, curve = 0, arr.pos = 0.8,
latex = T, arr.type = "curved", relsize = 0.85, box.prop=0.8,
cex = 0.8, box.cex = 0.7, lwd = 1)
