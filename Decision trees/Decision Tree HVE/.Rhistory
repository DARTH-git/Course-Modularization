params_all_owsa  <- data.frame(pars = v_names_params, basecase = as.numeric(l_params_all), min = rep(NA, length(v_names_params)),  max  = rep(NA, length(v_names_params)))
params_all_owsa$min[params_all_owsa$pars %in% params_owsa] <- c(0.01, 0.01,  1000, 10000)  # min parameter values
params_all_owsa$max[params_all_owsa$pars %in% params_owsa] <- c(0.99, 0.50, 15000, 40000)  # max parameter values
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_owsa  <- data.frame(pars = v_names_params,  min = rep(NA, length(v_names_params)),  max  = rep(NA, length(v_names_params)))
params_all_owsa$min[params_all_owsa$pars %in% params_owsa] <- c(0.01, 0.01,  1000, 10000)  # min parameter values
params_all_owsa$max[params_all_owsa$pars %in% params_owsa] <- c(0.99, 0.50, 15000, 40000)  # max parameter values
owsa_nmb         <- run_owsa_det(params_range_all = params_all_owsa ,  # dataframe containing relevant parameter values
params_basecase =  l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
params_all_owsa
params_owsa   <- c("p_HVE", "p_biopsy_comp", "c_tx", "c_biopsy") # parameters of interest for OWSA
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_owsa  <- data.frame(pars = v_names_params, basecase = as.numeric(l_params_all), min = rep(NA, length(v_names_params)),  max  = rep(NA, length(v_names_params)))
params_all_owsa$min[params_all_owsa$pars %in% params_owsa] <- c(0.01, 0.01,  1000, 10000)  # min parameter values
params_all_owsa$max[params_all_owsa$pars %in% params_owsa] <- c(0.99, 0.50, 15000, 40000)  # max parameter values
owsa_nmb         <- run_owsa_det(params_range_all = params_all_owsa ,  # dataframe containing relevant parameter values
params_basecase =  l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
owsa_nmb         <- run_owsa_det(params_range = params_all_owsa ,  # dataframe containing relevant parameter values
params_basecase =  l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
l_params_all
params_owsa   <- c("p_HVE", "p_biopsy_comp", "c_tx", "c_biopsy") # parameters of interest for OWSA
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_owsa  <- data.frame(pars = v_names_params,  min = rep(NA, length(v_names_params)),  max  = rep(NA, length(v_names_params)))
params_all_owsa$min[params_all_owsa$pars %in% params_owsa] <- c(0.01, 0.01,  1000, 10000)  # min parameter values
params_all_owsa$max[params_all_owsa$pars %in% params_owsa] <- c(0.99, 0.50, 15000, 40000)  # max parameter values
owsa_nmb         <- run_owsa_det(params_range = params_all_owsa ,  # dataframe containing relevant parameter values
params_basecase =  l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
owsa_nmb         <- run_owsa_det(params_range = subset(params_all_owsa, select = -c("baseline")) ,  # dataframe containing relevant parameter values
params_basecase =  l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
subset(params_all_owsa, select = -c("baseline")
subset(params_all_owsa, select = -c("baseline")
params_all_owsa
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_owsa  <- data.frame(pars = v_names_params, basecase = as.numeric(l_params_all), min = rep(NA, length(v_names_params)),  max  = rep(NA, length(v_names_params)))
params_all_owsa$min[params_all_owsa$pars %in% params_owsa] <- c(0.01, 0.01,  1000, 10000)  # min parameter values
params_all_owsa$max[params_all_owsa$pars %in% params_owsa] <- c(0.99, 0.50, 15000, 40000)  # max parameter values
owsa_nmb         <- run_owsa_det(params_range = subset(params_all_owsa, select = c("pars", "min", "max")) ,  # dataframe containing relevant parameter values
params_basecase =  l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
subset(params_all_owsa, select = c("pars", "min", "max"))
l_params_all
run_owsa_det(params_range = subset(params_all_owsa, select = c("pars", "min", "max")) ,  # dataframe containing relevant parameter values
params_basecase =  l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)
v_names_params
params_all_owsa  <- data.frame(pars = params_owsa, min = rep(NA, length(params_owsa )),  max  = rep(NA, length(params_owsa )))
params_all_owsa$min[params_all_owsa$pars %in% params_owsa] <- c(0.01, 0.01,  1000, 10000)  # min parameter values
params_all_owsa$max[params_all_owsa$pars %in% params_owsa] <- c(0.99, 0.50, 15000, 40000)  # max parameter values
params_all_owsa
owsa_nmb         <- run_owsa_det(params_range = subset(params_all_owsa, select = c("pars", "min", "max")) ,  # dataframe containing relevant parameter values
params_basecase =  l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
owsa_nmb
owsa_nmb         <- run_owsa_det(params_range = subset(params_all_owsa, select = c("pars", "min", "max")) ,  # dataframe containing relevant parameter values
params_basecase =  l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
plot(owsa_nmb, txtsize = 16, n_x_ticks = 5,
facet_scales = "free") +
theme(legend.position = "bottom")
owsa_opt_strat(owsa = owsa_nmb)
owsa_tornado(owsa = owsa_nmb)
params_twsa     <- c("p_HVE", "c_tx") # parameters of interest for TWSA
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_twsa <- data.frame(pars = v_names_params, basecase = as.numeric(l_params_all), min = rep(NA, length(v_names_params)),
max  = rep(NA, length(v_names_params)))
params_all_twsa$min[params_all_twsa$pars %in% params_twsa] <- c(0.01, 2000)   # min parameter values
params_all_twsa$max[params_all_twsa$pars %in% params_twsa] <- c(0.99, 40000)  # max parameter values
twsa_nmb        <- run_twsa_det(param1     = params_twsa[1],   # first parameters of interest
param2     = params_twsa[2],   # second parameters of interest
params_all = params_all_twsa,  # dataframe containing relevant parameter values
nsamp      = 40,               # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the twsa on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
params_owsa   <- c("p_HVE", "p_biopsy_comp", "c_tx", "c_biopsy") # parameters of interest for OWSA
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_owsa  <- data.frame(pars = params_owsa, min = rep(NA, length(params_owsa )),  max  = rep(NA, length(params_owsa )))
params_all_owsa$min[params_all_owsa$pars %in% params_owsa] <- c(0.01, 0.01,  1000, 10000)  # min parameter values
params_all_owsa$max[params_all_owsa$pars %in% params_owsa] <- c(0.99, 0.50, 15000, 40000)  # max parameter values
owsa_nmb         <- run_owsa_det(params_range = subset(params_all_owsa, select = c("pars", "min", "max")) ,  # dataframe containing relevant parameter values
params_basecase =  l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
plot(owsa_nmb, txtsize = 16, n_x_ticks = 5,
facet_scales = "free") +
theme(legend.position = "bottom")
params_owsa   <- c("p_HVE", "p_biopsy_comp", "c_tx", "c_biopsy") # parameters of interest for OWSA
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_owsa  <- data.frame(pars = params_owsa, min = rep(NA, length(params_owsa )),  max  = rep(NA, length(params_owsa )))
params_all_owsa$min[params_all_owsa$pars %in% params_owsa] <- c(0.01, 0.01,  1000, 10000)  # min parameter values
params_all_owsa$max[params_all_owsa$pars %in% params_owsa] <- c(0.99, 0.50, 15000, 40000)  # max parameter values
owsa_nmb         <- run_owsa_det(params_range = subset(params_all_owsa, select = c("pars", "min", "max")) ,  # dataframe containing relevant parameter values
params_basecase =  l_params_all,  # dataframe containing relevant parameter values
nsamp      = 100,              # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the OWSA on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
plot(owsa_nmb, txtsize = 16, n_x_ticks = 5,
facet_scales = "free") +
theme(legend.position = "bottom")
owsa_opt_strat(owsa = owsa_nmb)
owsa_tornado(owsa = owsa_nmb)
params_twsa     <- c("p_HVE", "c_tx") # parameters of interest for TWSA
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_twsa <- data.frame(pars = v_names_params, basecase = as.numeric(l_params_all), min = rep(NA, length(v_names_params)),
max  = rep(NA, length(v_names_params)))
params_all_twsa$min[params_all_twsa$pars %in% params_twsa] <- c(0.01, 2000)   # min parameter values
params_all_twsa
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_twsa <- data.frame(pars = params_twsa, min = rep(NA, length(params_twsa )), max  = rep(NA, length(params_twsa )))
run_twsa_det(params_range = params_all_twsa, # parameters of interest
params_basecase = l_params_all,  # dataframe containing relevant parameter values
nsamp      = 40,               # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the twsa on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # ex
params_all_twsa
params_all_twsa$min[params_all_twsa$pars %in% params_twsa] <- c(0.01, 2000)   # min parameter values
params_all_twsa$max[params_all_twsa$pars %in% params_twsa] <- c(0.99, 40000)  # max parameter values
params_all_twsa
l_params_all
twsa_nmb        <- run_twsa_det(params_range = params_all_twsa, # parameters of interest
params_basecase = l_params_all,  # dataframe containing relevant parameter values
nsamp      = 40,               # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the twsa on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
plot(twsa_nmb) +
ggtitle(label = "Two-way sensitivity analysis",subtitle = "Net monetary benefit") +
theme(legend.position = "bottom")
# Function to generate PSA input dataset
generate_psa_params <- function(n_sim = 1000, seed = 071518){
set.seed(seed)
# Dataframe of input parameters
df_psa_params   <- data.frame(
# Transition probabilities (per cycle)
p_HVE         = rbeta(n_sim, 52, 48),  # prevalence of HVE
p_HVE_comp    = rbeta(n_sim, 71, 29),  # complications with untreated HVE
p_OVE_comp    = rbeta(n_sim,  1, 99),  # complications with untreated OVE
p_HVE_comp_tx = rbeta(n_sim, 36, 64),  # complications with treated HVE
p_OVE_comp_tx = rbeta(n_sim, 20, 80),  # complications with treated OVE
p_biopsy_comp = rbeta(n_sim,  1, 19),  # probability of complications due to biopsy
# Costs
c_VE          = rgamma(n_sim, shape = 36, scale = 33.33),    # cost of remaining one cycle in state H
c_VE_comp     = rgamma(n_sim, shape = 81, scale = 111.1),    # cost of remaining one cycle in state S1
c_tx          = rgamma(n_sim, shape = 74.6, scale = 127.4),  # cost of remaining one cycle in state S2
c_biopsy      = rgamma(n_sim, shape = 25, scale = 1000),     # cost of treatment (per cycle)
# Utilities
q_VE          = rnorm(n_sim, mean = 20, sd = 1),  # utility when healthy
q_VE_comp     = rnorm(n_sim, mean = 19, sd = 2),  # utility when sick
q_loss_biopsy = rtruncnorm(n_sim, mean = -0.01, sd = 0.005, a = -0.1, b = 0)
)
return(df_psa_params)
}
# Try it
generate_psa_params(10)
# Number of simulations
n_sim <- 1000
# Generate PSA input dataset
df_psa_input     <- generate_psa_params(n_sim = n_sim)
# First six observations
head(df_psa_input)
# Histogram of parameters
ggplot(melt(df_psa_input, variable.name = "Parameter"), aes(x = value)) +
facet_wrap(~Parameter, scales = "free") +
geom_histogram(aes(y = ..density..)) +
theme_bw(base_size = 16)
colnames(df_c) <- v_names_str
# Histogram of parameters
ggplot(melt(df_psa_input, variable.name = "Parameter"), aes(x = value)) +
facet_wrap(~Parameter, scales = "free") +
geom_histogram(aes(y = ..density..)) +
theme_bw(base_size = 16)
params_twsa     <- c("p_HVE", "c_tx") # parameters of interest for TWSA
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_twsa <- data.frame(pars = params_twsa, min = rep(NA, length(params_twsa )), max  = rep(NA, length(params_twsa )))
params_all_twsa$min[params_all_twsa$pars %in% params_twsa] <- c(0.01, 2000)   # min parameter values
params_all_twsa$max[params_all_twsa$pars %in% params_twsa] <- c(0.99, 40000)  # max parameter values
twsa_nmb        <- run_twsa_det(params_range = params_all_twsa, # parameters of interest
params_basecase = l_params_all,  # dataframe containing relevant parameter values
nsamp      = 40,               # number of parameter values
FUN        = calculate_ce_out, # function to compute outputs
outcomes   = c("NMB"),         # output to do the twsa on
strategies = v_names_str,      # names of the strategies
n_wtp      = 450000)           # extra argument to pass to FUN
plot(twsa_nmb) +
ggtitle(label = "Two-way sensitivity analysis", subtitle = "Net monetary benefit") +
theme(legend.position = "bottom")
# Function to generate PSA input dataset
generate_psa_params <- function(n_sim = 1000, seed = 071518){
set.seed(seed)
# Dataframe of input parameters
df_psa_params   <- data.frame(
# Transition probabilities (per cycle)
p_HVE         = rbeta(n_sim, 52, 48),  # prevalence of HVE
p_HVE_comp    = rbeta(n_sim, 71, 29),  # complications with untreated HVE
p_OVE_comp    = rbeta(n_sim,  1, 99),  # complications with untreated OVE
p_HVE_comp_tx = rbeta(n_sim, 36, 64),  # complications with treated HVE
p_OVE_comp_tx = rbeta(n_sim, 20, 80),  # complications with treated OVE
p_biopsy_comp = rbeta(n_sim,  1, 19),  # probability of complications due to biopsy
# Costs
c_VE          = rgamma(n_sim, shape = 36, scale = 33.33),    # cost of remaining one cycle in state H
c_VE_comp     = rgamma(n_sim, shape = 81, scale = 111.1),    # cost of remaining one cycle in state S1
c_tx          = rgamma(n_sim, shape = 74.6, scale = 127.4),  # cost of remaining one cycle in state S2
c_biopsy      = rgamma(n_sim, shape = 25, scale = 1000),     # cost of treatment (per cycle)
# Utilities
q_VE          = rnorm(n_sim, mean = 20, sd = 1),  # utility when healthy
q_VE_comp     = rnorm(n_sim, mean = 19, sd = 2),  # utility when sick
q_loss_biopsy = rtruncnorm(n_sim, mean = -0.01, sd = 0.005, a = -0.1, b = 0)
)
return(df_psa_params)
}
# Try it
generate_psa_params(10)
# Number of simulations
n_sim <- 1000
# Generate PSA input dataset
df_psa_input     <- generate_psa_params(n_sim = n_sim)
# First six observations
head(df_psa_input)
# Histogram of parameters
ggplot(melt(df_psa_input, variable.name = "Parameter"), aes(x = value)) +
facet_wrap(~Parameter, scales = "free") +
geom_histogram(aes(y = ..density..)) +
theme_bw(base_size = 16)
# Initialize dataframes with PSA output
# Dataframe of costs
df_c <- as.data.frame(matrix(0,
nrow = n_sim,
ncol = n_str))
colnames(df_c) <- v_names_str
# Dataframe of effectiveness
df_e <- as.data.frame(matrix(0,
nrow = n_sim,
ncol = n_str))
colnames(df_e) <- v_names_str
# Run decision tree on each parameter set of PSA input dataset
for(i in 1:n_sim){
df_out_temp <- calculate_ce_out(df_psa_input[i, ])
df_c[i, ] <- df_out_temp$Cost
df_e[i, ] <- df_out_temp$Effect
# Display simulation progress
if(i/(n_sim/10) == round(i/(n_sim/10),0)) { # display progress every 10%
cat('\r', paste(i/n_sim * 100, "% done", sep = " "))
}
}
l_psa <- make_psa_obj(cost          = df_c,
effectiveness = df_e,
parameters    = df_psa_input,
strategies    = v_names_str)
df_psa_input
df_c
df_e
df_psa_input
v_names_str
make_psa_obj(cost          = df_c,
effectiveness = df_e,
parameters    = df_psa_input,
strategies    = v_names_str)
l_psa <- make_psa_obj(cost          = df_c,
effectiveness = df_e,
parameters    = df_psa_input,
strategies    = v_names_str)
head(l_psa)
save(df_psa_input, df_c, df_e, v_names_str, n_str,
l_psa,
file = here("output", "decision_tree_HVE_PSA_dataset.RData"))
load(file = here("output", "decision_tree_HVE_PSA_dataset.RData"))
v_wtp <- seq(0, 300000, by = 10000)
plot(l_psa)
# Compute expected costs and effects for each strategy from the PSA
df_out_ce_psa <- summary(l_psa)
df_out_ce_psa
# Calculate incremental cost-effectiveness ratios (ICERs)
df_cea_psa <- calculate_icers(cost       = df_out_ce_psa$meanCost,
effect     = df_out_ce_psa$meanEffect,
strategies = df_out_ce_psa$Strategy)
df_cea_psa
# Save CEA table with ICERs
# As .RData
save(df_cea_psa,
file = here("tables", "decision_tree_HVE_probabilistic_CEA_results.RData"))
# As .csv
write.csv(df_cea_psa,
file = here("tables", "decision_tree_HVE_probabilistic_CEA_results.csv"))
plot(df_cea_psa)
ceac_obj <- ceac(wtp = v_wtp, psa = l_psa)
# Regions of highest probability of cost-effectiveness for each strategy
summary(ceac_obj)
# CEAC & CEAF plot
plot(ceac_obj)
elc_obj <- calc_exp_loss(wtp = v_wtp, psa = l_psa)
elc_obj
# ELC plot
plot(elc_obj, log_y = FALSE)
evpi <- calc_evpi(wtp = v_wtp, psa = l_psa)
# EVPI plot
plot(evpi, effect_units = "QALY")
plot(owsa_nmb, txtsize = 16, n_x_ticks = 5,
facet_scales = "free") +
theme(legend.position = "bottom")
plot(owsa_nmb, txtsize = 16, n_x_ticks = 5,
facet_scales = "free") +
theme(legend.position = "bottom")
params_twsa     <- c("p_HVE", "c_tx") # parameters of interest for TWSA
# dataframe containing all parameters, their basecase values, and the min and max values of the parameters of interest
params_all_twsa <- data.frame(pars = params_twsa, min = rep(NA, length(params_twsa )), max  = rep(NA, length(params_twsa )))
params_all_twsa$min[params_all_twsa$pars %in% params_twsa] <- c(0.01, 2000)   # min parameter values
plot(twsa_nmb) +
ggtitle(label = "Two-way sensitivity analysis", subtitle = "Net monetary benefit") +
theme(legend.position = "bottom")
hist(rbeta(n_sim, shape1 = 1, shape2 = 3000))
mean(rbeta(n_sim, shape1 = 1, shape2 = 3000))
mean(rbeta(n_sim, shape1 = 10, shape2 = 3000))
mean(rtruncnorm(n_sim, mean = -0.01, sd = 0.005, a = -0.1, b = 0))
mean(rbeta(n_sim, shape1 = 10, shape2 = 300))
mean(rbeta(n_sim, shape1 = 4, shape2 = 300))
mean(rbeta(n_sim, shape1 = 4, shape2 = 280))
mean(rbeta(n_sim, shape1 = 4, shape2 = 380))
# Dataframe of input parameters
df_psa_params   <- data.frame(
# Transition probabilities (per cycle)
p_HVE         = rbeta(n_sim, 52, 48),  # prevalence of HVE
p_HVE_comp    = rbeta(n_sim, 71, 29),  # complications with untreated HVE
p_OVE_comp    = rbeta(n_sim,  1, 99),  # complications with untreated OVE
p_HVE_comp_tx = rbeta(n_sim, 36, 64),  # complications with treated HVE
p_OVE_comp_tx = rbeta(n_sim, 20, 80),  # complications with treated OVE
p_biopsy_comp = rbeta(n_sim,  1, 19),  # probability of complications due to biopsy
# Costs
c_VE          = rgamma(n_sim, shape = 36, scale = 33.33),    # cost of remaining one cycle in state H
c_VE_comp     = rgamma(n_sim, shape = 81, scale = 111.1),    # cost of remaining one cycle in state S1
c_tx          = rgamma(n_sim, shape = 74.6, scale = 127.4),  # cost of remaining one cycle in state S2
c_biopsy      = rgamma(n_sim, shape = 25, scale = 1000),     # cost of treatment (per cycle)
# Utilities
q_VE          = rnorm(n_sim, mean = 20, sd = 1),  # utility when healthy
q_VE_comp     = rnorm(n_sim, mean = 19, sd = 2),  # utility when sick
q_loss_biopsy = -rbeta(n_sim, shape1 = 4, shape2 = 380)
)
mean(-rbeta(n_sim, shape1 = 4, shape2 = 380))
# Function to generate PSA input dataset
generate_psa_params <- function(n_sim = 1000, seed = 071518){
set.seed(seed)
# Dataframe of input parameters
df_psa_params   <- data.frame(
# Transition probabilities (per cycle)
p_HVE         = rbeta(n_sim, 52, 48),  # prevalence of HVE
p_HVE_comp    = rbeta(n_sim, 71, 29),  # complications with untreated HVE
p_OVE_comp    = rbeta(n_sim,  1, 99),  # complications with untreated OVE
p_HVE_comp_tx = rbeta(n_sim, 36, 64),  # complications with treated HVE
p_OVE_comp_tx = rbeta(n_sim, 20, 80),  # complications with treated OVE
p_biopsy_comp = rbeta(n_sim,  1, 19),  # probability of complications due to biopsy
# Costs
c_VE          = rgamma(n_sim, shape = 36, scale = 33.33),    # cost of remaining one cycle in state H
c_VE_comp     = rgamma(n_sim, shape = 81, scale = 111.1),    # cost of remaining one cycle in state S1
c_tx          = rgamma(n_sim, shape = 74.6, scale = 127.4),  # cost of remaining one cycle in state S2
c_biopsy      = rgamma(n_sim, shape = 25, scale = 1000),     # cost of treatment (per cycle)
# Utilities
q_VE          = rnorm(n_sim, mean = 20, sd = 1),  # utility when healthy
q_VE_comp     = rnorm(n_sim, mean = 19, sd = 2),  # utility when sick
q_loss_biopsy = -rbeta(n_sim, shape1 = 4, shape2 = 380)
)
return(df_psa_params)
}
# Try it
generate_psa_params(10)
# Number of simulations
n_sim <- 1000
# Generate PSA input dataset
df_psa_input     <- generate_psa_params(n_sim = n_sim)
# First six observations
head(df_psa_input)
# Histogram of parameters
ggplot(melt(df_psa_input, variable.name = "Parameter"), aes(x = value)) +
facet_wrap(~Parameter, scales = "free") +
geom_histogram(aes(y = ..density..)) +
theme_bw(base_size = 16)
colnames(df_c) <- v_names_str
# Dataframe of effectiveness
df_e <- as.data.frame(matrix(0,
nrow = n_sim,
ncol = n_str))
colnames(df_e) <- v_names_str
# Run decision tree on each parameter set of PSA input dataset
for(i in 1:n_sim){
df_out_temp <- calculate_ce_out(df_psa_input[i, ])
df_c[i, ] <- df_out_temp$Cost
df_e[i, ] <- df_out_temp$Effect
# Display simulation progress
if(i/(n_sim/10) == round(i/(n_sim/10),0)) { # display progress every 10%
cat('\r', paste(i/n_sim * 100, "% done", sep = " "))
}
}
l_psa <- make_psa_obj(cost          = df_c,
effectiveness = df_e,
parameters    = df_psa_input,
strategies    = v_names_str)
head(l_psa)
save(df_psa_input, df_c, df_e, v_names_str, n_str,
l_psa,
file = here("output", "decision_tree_HVE_PSA_dataset.RData"))
load(file = here("output", "decision_tree_HVE_PSA_dataset.RData"))
# Compute expected costs and effects for each strategy from the PSA
df_out_ce_psa <- summary(l_psa)
df_out_ce_psa
# Calculate incremental cost-effectiveness ratios (ICERs)
df_cea_psa <- calculate_icers(cost       = df_out_ce_psa$meanCost,
effect     = df_out_ce_psa$meanEffect,
strategies = df_out_ce_psa$Strategy)
df_cea_psa
# Save CEA table with ICERs
# As .RData
save(df_cea_psa,
file = here("tables", "decision_tree_HVE_probabilistic_CEA_results.RData"))
# As .csv
write.csv(df_cea_psa,
file = here("tables", "decision_tree_HVE_probabilistic_CEA_results.csv"))
if_else(cost<effect, print("Do more research"), print("Stop doing reserach")
cost <- 30
effect <- 4
if_else(cost<effect, print("Do more research"), print("Stop doing reserach")
if_else(cost<effect, print("Do more research"), print("Stop doing reserach"))
cost <- 30
effect <- 4
if_else(cost<effect, print("Do more research"), print("Stop doing reserach"))
if_else(cost<effect, print("Do more research"), print("Stop doing reserach"))
cost < effect
if_else(cost < effect,
print("Do more research"),
print("Stop doing reserach"))
if{cost < effect,
print("Do more research"))
cost < effect,
print("Stop doing reserach")}
if{cost < effect,
print("Do more research")}
if{cost < effect,
print("Do more research")}
cost < effect,
print("Stop doing reserach")}
else(cost < effect,
ifelse(cost < effect,
print("Do more research"),
cost < effect,
print("Stop doing reserach")}
ifelse(cost < effect,
print("Do more research"),
cost < effect,
print("Stop doing reserach"))
ifelse(cost < effect,
print("Do more research"),
print("Stop doing reserach"))
if(cost < effect,
print("Do more research"))
if(cost < effect,
print("Do more research"))
print("Do more research")
cost < effect
if(cost < effect,
print("Do more research"))
if{cost < effect,
print("Do more research")}
print("Do more research"},
else (costs > benefit){
print("Stop doing reserach"})
