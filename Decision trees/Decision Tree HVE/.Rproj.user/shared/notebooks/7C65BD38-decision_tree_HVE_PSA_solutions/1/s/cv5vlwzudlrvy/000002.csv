"0","# Function to generate PSA input dataset"
"0","generate_psa_params <- function(n_sim = 1000, seed = 071518){"
"0","  set.seed(seed)"
"0","  # Dataframe of input parameters"
"0","  df_psa_params   <- data.frame("
"0","    "
"0","    # Transition probabilities (per cycle)"
"0","    p_HVE         = rbeta(n_sim, 52, 48),  # prevalence of HVE"
"0","    p_HVE_comp    = rbeta(n_sim, 71, 29),  # complications with untreated HVE"
"0","    p_OVE_comp    = rbeta(n_sim,  1, 99),  # complications with untreated OVE"
"0","    p_HVE_comp_tx = rbeta(n_sim, 36, 64),  # complications with treated HVE"
"0","    p_OVE_comp_tx = rbeta(n_sim, 20, 80),  # complications with treated OVE"
"0","    p_biopsy_comp = rbeta(n_sim,  1, 19),  # probability of complications due to biopsy"
"0","    "
"0","    # Costs"
"0","    c_VE          = rgamma(n_sim, shape = 36, scale = 33.33),    # cost of remaining one cycle in state H"
"0","    c_VE_comp     = rgamma(n_sim, shape = 81, scale = 111.1),    # cost of remaining one cycle in state S1"
"0","    c_tx          = rgamma(n_sim, shape = 74.6, scale = 127.4),  # cost of remaining one cycle in state S2"
"0","    c_biopsy      = rgamma(n_sim, shape = 25, scale = 1000),     # cost of treatment (per cycle)"
"0","    "
"0","    # Utilities"
"0","    q_VE          = rnorm(n_sim, mean = 20, sd = 1),  # utility when healthy"
"0","    q_VE_comp     = rnorm(n_sim, mean = 19, sd = 2),  # utility when sick"
"0","    q_loss_biopsy = rtruncnorm(n_sim, mean = -0.01, sd = 0.005, a = -0.1, b = 0)"
"0","  )"
"0","  return(df_psa_params)"
"0","}"
"0","# Try it"
"0","generate_psa_params(10) "
