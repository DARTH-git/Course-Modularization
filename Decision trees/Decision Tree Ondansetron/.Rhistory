library(igraph)
library(ggplot2)
library(ggraph)
library(stringr)
library(ellipse)
library(reshape2)
library(truncnorm)
library(dampack)   # for CEA
source(here::here('functions','Functions.R'))
v_names_str <- c('Ondasentron', 'Metoclopramide') # names of strategies
n_str       <- length(v_names_str)                # number of strategies
wtp         <- 500                                # willingness to pay threshold
# input values - Ondansetron
p_sem_on                    <- 0.25   # Prob. of significant emesis
p_sem_ade_on                <- 0.26   # Prob. of ADE after emesis
p_sem_ade_trt_on            <- 0.60   # Prob. of treatment after ADE with emesis
p_sem_ade_trt_res_on        <- 0.66   # Prob. of resolution of treated ADE with emesis
p_sem_ade_no_trt_res_on     <- 1      # Prob. of resolution after ADE that did not
# require treament
p_no_sem_ade_on             <- 0.11   # Prob. of ADE without emesis
p_no_sem_ade_trt_on         <- 0.17   # Prob. of treatment after ADE without emesis
p_no_sem_ade_trt_res_on     <- 1      # Prob. of resolution of treated ADE without emesis
p_no_sem_ade_no_trt_res_on  <- 1      # Prob. of resolution of non treated ADE without
# emesis
c_trt_on                    <- 10     # cost of treatment
c_sem_on                    <- 30     # cost of episode of emesis
c_ade_on                    <- 20     # cost of ADE
c_ade_trt_on                <-  5     # cost of treating an ADE
# input values - metoclopramide
p_sem_met                   <- 0.58   # Prob. of significant emesis
p_sem_ade_met               <- 0.34   # Prob. of ADE after emesis
p_sem_ade_trt_met           <- 0.60   # Prob. of treatment after ADE with emesis
p_sem_ade_trt_res_met       <- 0.78   # Prob. of resolution of treated ADE with emesis
p_sem_ade_no_trt_res_met    <- 1      # Prob. of resolution after ADE that did not
# require treament
p_no_sem_ade_met            <- 0.12   # Prob. of ADE without emesis
p_no_sem_ade_trt_met        <- 0.50   # Prob. of treatment after ADE without emesis
p_no_sem_ade_trt_res_met    <- 1      # Prob. of resolution of treated ADE without emesis
p_no_sem_ade_no_trt_res_met <- 1      # Prob. of resolution of non treated ADE without
# emesis
c_trt_met                   <- 10     # cost of treatment
c_sem_met                   <- 30     # cost of episode of emesis
c_ade_met                   <- 20     # cost of ADE
c_ade_trt_met               <-  5     # cost of treating an ADE
# store the parameters into a list
l_params_all <- as.list(data.frame(p_sem_on, p_sem_ade_on, p_sem_ade_trt_on,
p_sem_ade_trt_res_on, p_sem_ade_no_trt_res_on,
p_no_sem_ade_on, p_no_sem_ade_trt_on,
p_no_sem_ade_trt_res_on, p_no_sem_ade_no_trt_res_on,
c_trt_on, c_sem_on, c_ade_on, c_ade_trt_on,
p_sem_met, p_sem_ade_met, p_sem_ade_trt_met,
p_sem_ade_trt_res_met, p_sem_ade_no_trt_res_met,
p_no_sem_ade_met, p_no_sem_ade_trt_met,
p_no_sem_ade_trt_res_met, p_no_sem_ade_no_trt_res_met,
c_trt_met, c_sem_met, c_ade_met, c_ade_trt_met))
decision_tree_ondansetron_output <- with(as.list(l_params_all), {
# Create vector of weights for each strategy
# weight per path for the ondasentron arm
v_w_on <-  c(
# emesis with no ADEs
p_sem_on * (1 - p_sem_ade_on),
# ADE after emesis that was treated and resolved
p_sem_on * p_sem_ade_on * p_sem_ade_trt_on * p_sem_ade_trt_res_on,
# ADE after emesis that was treated and did not resolve
p_sem_on * p_sem_ade_on * p_sem_ade_trt_on * (1 - p_sem_ade_trt_res_on),
# ADE after emesis that was not treated and resolved
p_sem_on * p_sem_ade_on * (1 - p_sem_ade_trt_on) * p_sem_ade_no_trt_res_on,
# ADE after emesis that was not treated and did not resolve
p_sem_on * p_sem_ade_on * (1 - p_sem_ade_trt_on) * (1 - p_sem_ade_no_trt_res_on),
# no emesis with no ADEs
(1 - p_sem_on) * (1 - p_no_sem_ade_on),
# ADE after no emesis that was treated and resolved
(1 - p_sem_on) * p_no_sem_ade_on * p_no_sem_ade_trt_on * p_no_sem_ade_trt_res_on,
# ADE after no emesis that was treated and did not resolve
(1 - p_sem_on) * p_no_sem_ade_on * p_no_sem_ade_trt_on * (1 - p_no_sem_ade_trt_res_on),
# ADE after no emesis that was not treated and resolved
(1 - p_sem_on) * p_no_sem_ade_on * (1 - p_no_sem_ade_trt_on) * p_no_sem_ade_no_trt_res_on,
# ADE after no emesis that was not treated and did not resolve
(1 - p_sem_on) * p_no_sem_ade_on * (1 - p_no_sem_ade_trt_on) *
(1 - p_no_sem_ade_no_trt_res_on))
# weight per path for the metoclopramide arm
v_w_met <-  c(
# emesis with no ADEs
p_sem_met * (1 - p_sem_ade_met),
# ADE after emesis that was treated and resolved
p_sem_met * p_sem_ade_met * p_sem_ade_trt_met * p_sem_ade_trt_res_met,
# ADE after emesis that was treated and did not resolve
p_sem_met * p_sem_ade_met * p_sem_ade_trt_met * (1 - p_sem_ade_trt_res_met),
# ADE after emesis that was not treated and resolved
p_sem_met * p_sem_ade_met * (1 - p_sem_ade_trt_met) * p_sem_ade_no_trt_res_met,
# ADE after emesis that was not treated and did not resolve
p_sem_met * p_sem_ade_met * (1 - p_sem_ade_trt_met) * (1 - p_sem_ade_no_trt_res_met),
# no emesis with no ADEs
(1 - p_sem_met) * (1 - p_no_sem_ade_met),
# ADE after no emesis that was treated and resolved
(1 - p_sem_met) * p_no_sem_ade_met * p_no_sem_ade_trt_met * p_no_sem_ade_trt_res_met,
# ADE after no emesis that was treated and did not resolve
(1 - p_sem_met) * p_no_sem_ade_met * p_no_sem_ade_trt_met * (1 - p_no_sem_ade_trt_res_met),
# ADE after no emesis that was not treated and resolved
(1 - p_sem_met) * p_no_sem_ade_met * (1 - p_no_sem_ade_trt_met) * p_no_sem_ade_no_trt_res_met,
# ADE after no emesis that was not treated and did not resolve
(1 - p_sem_met) * p_no_sem_ade_met * (1 - p_no_sem_ade_trt_met) *
(1 - p_no_sem_ade_no_trt_res_met))
# Create vector of costs for each strategy
# Estimating cost per path for the ondasentron arm
v_c_on <-
c(c_trt_on + c_sem_on,
c_trt_on + c_sem_on + c_ade_on + c_ade_trt_on,
c_trt_on + c_sem_on + c_ade_on + c_ade_trt_on,
c_trt_on + c_sem_on + c_ade_on,
c_trt_on + c_sem_on + c_ade_on,
c_trt_on,
c_trt_on + c_ade_on + c_ade_trt_on,
c_trt_on + c_ade_on + c_ade_trt_on,
c_trt_on + c_ade_on,
c_trt_on + c_ade_on)
# Estimating cost per path for the metoclopramide arm
v_c_met <-
c(c_trt_met + c_sem_met,
c_trt_met + c_sem_met + c_ade_met + c_ade_trt_met,
c_trt_met + c_sem_met + c_ade_met + c_ade_trt_met,
c_trt_met + c_sem_met + c_ade_met,
c_trt_met + c_sem_met + c_ade_met,
c_trt_met,
c_trt_met + c_ade_met + c_ade_trt_met,
c_trt_met + c_ade_met + c_ade_trt_met,
c_trt_met + c_ade_met,
c_trt_met + c_ade_met)
# Create vector of utilities for each strategy
# vector of health outcomes for both therapies for each path
v_e_on  <- v_e_met <- c(0,
0,
0,
0,
0,
1,
0,
0,
0,
0)
# Calculate total costs for each strategy
tc_on   <- v_w_on   %*%  v_c_on
tc_met  <- v_w_met  %*%  v_c_met
# Calculate total utilities for each strategy
te_on   <- v_w_on   %*%  v_e_on
te_met  <- v_w_met  %*%  v_e_met
v_tc    <- c(tc_on, tc_met)   # vector of total costs
v_te    <- c(te_on, te_met)   # vector of total life years
v_nmb   <- v_te * wtp - v_tc  # calculate vector of nmb
# Name outcomes
names(v_tc)  <- v_names_str   # names for the elements of the  tc  vector
names(v_te)  <- v_names_str   # names for the elements of the  te vector
names(v_nmb) <- v_names_str   # names for the elements of the nmb vector
df_output <- data.frame(Strategy        =  v_names_str,
Cost            =  v_tc,
Effectiveness   =  v_te,
NMB             =  v_nmb)
return(df_output)
})
# model output
decision_tree_ondansetron_output
branches <- read.csv(here::here('data','decision_tree_ondansetron_branches.csv'), stringsAsFactors = F, header = T)
tree     <- create_tree(branches)
plot_tree(tree, font.size = 5)
# create the transition probability matrix for NO treatment
decision_tree_ondansetron_cea  <-
calculate_icers(cost = decision_tree_ondansetron_output$Cost,
effect     = decision_tree_ondansetron_output$Effect,
strategies = decision_tree_ondansetron_output$Strategy) #,
# ref_strat  = 'Tx All')
decision_tree_ondansetron_cea
plot(decision_tree_ondansetron_cea, effect_units = "QALYs")
l_params_all
source(here::here("functions", "Functions_decision_tree_ondansetron.R"))
# Test function
calculate_ce_out(l_params_all)
owsa_nmb <- owsa_det(parms = c("p_HVE", "p_biopsy_comp", "c_tx", "c_biopsy"),
ranges = list("p_HVE"         = c(0.01, 0.99),
"p_biopsy_comp" = c(0.01, 0.50),
"c_tx"          = c(1000, 15000),
"c_biopsy"      = c(10000, 40000)),
nsamps = 100, # number of values
FUN = calculate_ce_out, # Function to compute outputs
params_basecase = l_params_all, # List with base-case parameters
outcome = "NMB",   #"Effect"   # Output to do the OWSA on
strategies = v_names_str, # Names of strategies
n_wtp = 450000        # Extra argument to pass to FUN
)
rm(list = ls())    # clear memory (removes all the variables from the workspace)
# Uncomment if you don't have all required packages installed
# source("app0_packages_setup.R", echo = TRUE)
library(dplyr)     # For data manipulation
library(dectree)   # To plot tree
library(lazyeval)
library(igraph)
library(ggplot2)
library(ggraph)
library(stringr)
library(ellipse)
library(reshape2)
library(truncnorm)
library(dampack)   # for CEA
source(here::here('functions','Functions.R'))
v_names_str <- c('Ondasentron', 'Metoclopramide') # names of strategies
n_str       <- length(v_names_str)                # number of strategies
wtp         <- 500                                # willingness to pay threshold
# input values - Ondansetron
p_sem_on                    <- 0.25   # Prob. of significant emesis
p_sem_ade_on                <- 0.26   # Prob. of ADE after emesis
p_sem_ade_trt_on            <- 0.60   # Prob. of treatment after ADE with emesis
p_sem_ade_trt_res_on        <- 0.66   # Prob. of resolution of treated ADE with emesis
p_sem_ade_no_trt_res_on     <- 1      # Prob. of resolution after ADE that did not
# require treament
p_no_sem_ade_on             <- 0.11   # Prob. of ADE without emesis
p_no_sem_ade_trt_on         <- 0.17   # Prob. of treatment after ADE without emesis
p_no_sem_ade_trt_res_on     <- 1      # Prob. of resolution of treated ADE without emesis
p_no_sem_ade_no_trt_res_on  <- 1      # Prob. of resolution of non treated ADE without
# emesis
c_trt_on                    <- 10     # cost of treatment
c_sem_on                    <- 30     # cost of episode of emesis
c_ade_on                    <- 20     # cost of ADE
c_ade_trt_on                <-  5     # cost of treating an ADE
# input values - metoclopramide
p_sem_met                   <- 0.58   # Prob. of significant emesis
p_sem_ade_met               <- 0.34   # Prob. of ADE after emesis
p_sem_ade_trt_met           <- 0.60   # Prob. of treatment after ADE with emesis
p_sem_ade_trt_res_met       <- 0.78   # Prob. of resolution of treated ADE with emesis
p_sem_ade_no_trt_res_met    <- 1      # Prob. of resolution after ADE that did not
# require treament
p_no_sem_ade_met            <- 0.12   # Prob. of ADE without emesis
p_no_sem_ade_trt_met        <- 0.50   # Prob. of treatment after ADE without emesis
p_no_sem_ade_trt_res_met    <- 1      # Prob. of resolution of treated ADE without emesis
p_no_sem_ade_no_trt_res_met <- 1      # Prob. of resolution of non treated ADE without
# emesis
c_trt_met                   <- 10     # cost of treatment
c_sem_met                   <- 30     # cost of episode of emesis
c_ade_met                   <- 20     # cost of ADE
c_ade_trt_met               <-  5     # cost of treating an ADE
# store the parameters into a list
l_params_all <- as.list(data.frame(p_sem_on, p_sem_ade_on, p_sem_ade_trt_on,
p_sem_ade_trt_res_on, p_sem_ade_no_trt_res_on,
p_no_sem_ade_on, p_no_sem_ade_trt_on,
p_no_sem_ade_trt_res_on, p_no_sem_ade_no_trt_res_on,
c_trt_on, c_sem_on, c_ade_on, c_ade_trt_on,
p_sem_met, p_sem_ade_met, p_sem_ade_trt_met,
p_sem_ade_trt_res_met, p_sem_ade_no_trt_res_met,
p_no_sem_ade_met, p_no_sem_ade_trt_met,
p_no_sem_ade_trt_res_met, p_no_sem_ade_no_trt_res_met,
c_trt_met, c_sem_met, c_ade_met, c_ade_trt_met))
decision_tree_ondansetron_output <- with(as.list(l_params_all), {
# Create vector of weights for each strategy
# weight per path for the ondasentron arm
v_w_on <-  c(
# emesis with no ADEs
p_sem_on * (1 - p_sem_ade_on),
# ADE after emesis that was treated and resolved
p_sem_on * p_sem_ade_on * p_sem_ade_trt_on * p_sem_ade_trt_res_on,
# ADE after emesis that was treated and did not resolve
p_sem_on * p_sem_ade_on * p_sem_ade_trt_on * (1 - p_sem_ade_trt_res_on),
# ADE after emesis that was not treated and resolved
p_sem_on * p_sem_ade_on * (1 - p_sem_ade_trt_on) * p_sem_ade_no_trt_res_on,
# ADE after emesis that was not treated and did not resolve
p_sem_on * p_sem_ade_on * (1 - p_sem_ade_trt_on) * (1 - p_sem_ade_no_trt_res_on),
# no emesis with no ADEs
(1 - p_sem_on) * (1 - p_no_sem_ade_on),
# ADE after no emesis that was treated and resolved
(1 - p_sem_on) * p_no_sem_ade_on * p_no_sem_ade_trt_on * p_no_sem_ade_trt_res_on,
# ADE after no emesis that was treated and did not resolve
(1 - p_sem_on) * p_no_sem_ade_on * p_no_sem_ade_trt_on * (1 - p_no_sem_ade_trt_res_on),
# ADE after no emesis that was not treated and resolved
(1 - p_sem_on) * p_no_sem_ade_on * (1 - p_no_sem_ade_trt_on) * p_no_sem_ade_no_trt_res_on,
# ADE after no emesis that was not treated and did not resolve
(1 - p_sem_on) * p_no_sem_ade_on * (1 - p_no_sem_ade_trt_on) *
(1 - p_no_sem_ade_no_trt_res_on))
# weight per path for the metoclopramide arm
v_w_met <-  c(
# emesis with no ADEs
p_sem_met * (1 - p_sem_ade_met),
# ADE after emesis that was treated and resolved
p_sem_met * p_sem_ade_met * p_sem_ade_trt_met * p_sem_ade_trt_res_met,
# ADE after emesis that was treated and did not resolve
p_sem_met * p_sem_ade_met * p_sem_ade_trt_met * (1 - p_sem_ade_trt_res_met),
# ADE after emesis that was not treated and resolved
p_sem_met * p_sem_ade_met * (1 - p_sem_ade_trt_met) * p_sem_ade_no_trt_res_met,
# ADE after emesis that was not treated and did not resolve
p_sem_met * p_sem_ade_met * (1 - p_sem_ade_trt_met) * (1 - p_sem_ade_no_trt_res_met),
# no emesis with no ADEs
(1 - p_sem_met) * (1 - p_no_sem_ade_met),
# ADE after no emesis that was treated and resolved
(1 - p_sem_met) * p_no_sem_ade_met * p_no_sem_ade_trt_met * p_no_sem_ade_trt_res_met,
# ADE after no emesis that was treated and did not resolve
(1 - p_sem_met) * p_no_sem_ade_met * p_no_sem_ade_trt_met * (1 - p_no_sem_ade_trt_res_met),
# ADE after no emesis that was not treated and resolved
(1 - p_sem_met) * p_no_sem_ade_met * (1 - p_no_sem_ade_trt_met) * p_no_sem_ade_no_trt_res_met,
# ADE after no emesis that was not treated and did not resolve
(1 - p_sem_met) * p_no_sem_ade_met * (1 - p_no_sem_ade_trt_met) *
(1 - p_no_sem_ade_no_trt_res_met))
# Create vector of costs for each strategy
# Estimating cost per path for the ondasentron arm
v_c_on <-
c(c_trt_on + c_sem_on,
c_trt_on + c_sem_on + c_ade_on + c_ade_trt_on,
c_trt_on + c_sem_on + c_ade_on + c_ade_trt_on,
c_trt_on + c_sem_on + c_ade_on,
c_trt_on + c_sem_on + c_ade_on,
c_trt_on,
c_trt_on + c_ade_on + c_ade_trt_on,
c_trt_on + c_ade_on + c_ade_trt_on,
c_trt_on + c_ade_on,
c_trt_on + c_ade_on)
# Estimating cost per path for the metoclopramide arm
v_c_met <-
c(c_trt_met + c_sem_met,
c_trt_met + c_sem_met + c_ade_met + c_ade_trt_met,
c_trt_met + c_sem_met + c_ade_met + c_ade_trt_met,
c_trt_met + c_sem_met + c_ade_met,
c_trt_met + c_sem_met + c_ade_met,
c_trt_met,
c_trt_met + c_ade_met + c_ade_trt_met,
c_trt_met + c_ade_met + c_ade_trt_met,
c_trt_met + c_ade_met,
c_trt_met + c_ade_met)
# Create vector of utilities for each strategy
# vector of health outcomes for both therapies for each path
v_e_on  <- v_e_met <- c(0,
0,
0,
0,
0,
1,
0,
0,
0,
0)
# Calculate total costs for each strategy
tc_on   <- v_w_on   %*%  v_c_on
tc_met  <- v_w_met  %*%  v_c_met
# Calculate total utilities for each strategy
te_on   <- v_w_on   %*%  v_e_on
te_met  <- v_w_met  %*%  v_e_met
v_tc    <- c(tc_on, tc_met)   # vector of total costs
v_te    <- c(te_on, te_met)   # vector of total life years
v_nmb   <- v_te * wtp - v_tc  # calculate vector of nmb
# Name outcomes
names(v_tc)  <- v_names_str   # names for the elements of the  tc  vector
names(v_te)  <- v_names_str   # names for the elements of the  te vector
names(v_nmb) <- v_names_str   # names for the elements of the nmb vector
df_output <- data.frame(Strategy        =  v_names_str,
Cost            =  v_tc,
Effectiveness   =  v_te,
NMB             =  v_nmb)
return(df_output)
})
# model output
decision_tree_ondansetron_output
branches <- read.csv(here::here('data','decision_tree_ondansetron_branches.csv'), stringsAsFactors = F, header = T)
tree     <- create_tree(branches)
plot_tree(tree, font.size = 5)
# create the transition probability matrix for NO treatment
decision_tree_ondansetron_cea  <-
calculate_icers(cost = decision_tree_ondansetron_output$Cost,
effect     = decision_tree_ondansetron_output$Effect,
strategies = decision_tree_ondansetron_output$Strategy) #,
# ref_strat  = 'Tx All')
decision_tree_ondansetron_cea
plot(decision_tree_ondansetron_cea, effect_units = "QALYs")
l_params_all
source(here::here("functions", "Functions_decision_tree_ondansetron.R"))
# Test function
calculate_ce_out(l_params_all)
owsa_nmb <- owsa_det(parms = c("p_sem_on", "p_no_sem_ade_on", "p_sem_met",
"p_no_sem_ade_met"),
ranges = list("p_sem_on"         = c(0, 1),
"p_no_sem_ade_on"  = c(0, 1),
"p_sem_met"        = c(0, 1),
"p_no_sem_ade_met" = c(0, 1)),
nsamps = 100,  # number of values
FUN = calculate_ce_out,  # Function to compute outputs
params_basecase = l_params_all,  # List with base-case parameters
outcome = "NMB",  # Output to do the OWSA on
strategies = v_names_str  # Names of strategies
)
plot(owsa_nmb, txtsize = 16, n_x_ticks = 5,
facet_scales = "free") +
theme(legend.position = "bottom")
owsa_opt_strat(owsa = owsa_nmb)
owsa_tornado(owsa = owsa_nmb, strategy = c("Metoclopramide"))
twsa_nmb <- twsa_det(parm1  = "p_sem_on",  # parameter 1 name
parm2  = "p_no_sem_ade_met", # parameter 2 name
ranges = list("p_sem_on"  = c(0, 1),
"p_no_sem_ade_met" = c(0, 1)),
nsamps = 40, # number of values
FUN = calculate_ce_out, # Function to compute outputs
params_basecase = l_params_all, # Vector with base-case parameters
outcome = "NMB",      # Output to do the OWSA on
strategies = v_names_str # Names of strategies
)
plot(twsa_nmb) +
ggtitle(label = "Two-way sensitivity analysis",subtitle = "Net monetary benefit") +
theme(legend.position = "bottom")
# Function to generate PSA input dataset
generate_psa_params <- function(n_sim = 1000, seed = 071518){
set.seed(seed)
### Dataframe of input parameters
df_psa_params   <- data.frame(
# Transition probabilities (per cycle)
p_sem_on                      = rbeta(n_sim, 19, 56),
p_sem_ade_on                  = rbeta(n_sim, 19, 57),
p_sem_ade_trt_on              = rbeta(n_sim, 14, 9),
p_sem_ade_trt_res_on          = rbeta(n_sim, 14, 7),
p_sem_ade_no_trt_res_on       = rbeta(n_sim, 0.99, 0.03),
p_no_sem_ade_on               = rbeta(n_sim, 4, 34),
p_no_sem_ade_trt_on           = rbeta(n_sim, 26, 130),
p_no_sem_ade_trt_res_on       = 1,
p_no_sem_ade_no_trt_res_on    = 0,
p_sem_met                     = rbeta(n_sim, 6, 4),
p_sem_ade_met                 = rbeta(n_sim, 7, 14),
p_sem_ade_trt_met             = rbeta(n_sim, 6, 4),
p_sem_ade_trt_res_met         = rbeta(n_sim, 3, 1),
p_sem_ade_no_trt_res_met      = rbeta(n_sim, 0.99, 0.03),
p_no_sem_ade_met              = rbeta(n_sim, 4, 25),
p_no_sem_ade_trt_met          = rbeta(n_sim, 12, 12),
p_no_sem_ade_trt_res_met      = 1,
p_no_sem_ade_no_trt_res_met   = 0,
### Costs
c_trt_on                      = rgamma(n_sim, shape=25, scale=0.4),
c_sem_on                      = rgamma(n_sim, shape=56, scale=0.5),
c_ade_on                      = rgamma(n_sim, shape=45, scale=0.45),
c_ade_trt_on                  = rgamma(n_sim, shape=25, scale=0.2),
c_trt_met                     = rgamma(n_sim, shape=25, scale=0.4),
c_sem_met                     = rgamma(n_sim, shape=56, scale=0.5),
c_ade_met                     = rgamma(n_sim, shape=45, scale=0.45),
c_ade_trt_met                 = rgamma(n_sim, shape=25, scale=0.2)
)
return(df_psa_params)
}
# Try it
generate_psa_params(10)
# Number of simulations
n_sim <- 1000
# Generate PSA input dataset
df_psa_input     <- generate_psa_params(n_sim = n_sim)
# First six observations
head(df_psa_input)
# Histogram of parameters
ggplot(melt(df_psa_input, variable.name = "Parameter"), aes(x = value)) +
facet_wrap(~Parameter, scales = "free") +
geom_histogram(aes(y = ..density..)) +
theme_bw(base_size = 16)
# Initialize dataframes with PSA output
# Dataframe of costs
df_c <- as.data.frame(matrix(0,
nrow = n_sim,
ncol = n_str))
colnames(df_c) <- v_names_str
# Dataframe of effectiveness
df_e <- as.data.frame(matrix(0,
nrow = n_sim,
ncol = n_str))
colnames(df_e) <- v_names_str
# Run decision tree on each parameter set of PSA input dataset
for(i in 1:n_sim){
df_out_temp <- calculate_ce_out(df_psa_input[i, ])
df_c[i, ] <- df_out_temp$Cost
df_e[i, ] <- df_out_temp$Effect
# Display simulation progress
if(i/(n_sim/10) == round(i/(n_sim/10),0)) { # display progress every 10%
cat('\r', paste(i/n_sim * 100, "% done", sep = " "))
}
}
l_psa <- make_psa_obj(cost          = df_c,
effectiveness = df_e,
parameters    = df_psa_input,
strategies    = v_names_str)
save(df_psa_input, df_c, df_e, v_names_str, n_str,
l_psa,
file = here::here("output", "decision_tree_ondansetron_PSA_dataset.RData"))
load(file = here::here("output", "decision_tree_ondansetron_PSA_dataset.RData"))
v_wtp <- seq(0, 300000, by = 10000)
plot(l_psa)
# Compute expected costs and effects for each strategy from the PSA
df_out_ce_psa <- summary(l_psa)
df_out_ce_psa
# Calculate incremental cost-effectiveness ratios (ICERs)
df_cea_psa <- calculate_icers(cost       = df_out_ce_psa$meanCost,
effect     = df_out_ce_psa$meanEffect,
strategies = df_out_ce_psa$Strategy)
df_cea_psa
# Save CEA table with ICERs
# As .RData
save(df_cea_psa,
file = here::here("tables",
"decision_tree_ondansetron_probabilistic_CEA_results.RData"))
# As .csv
write.csv(df_cea_psa,
file = here::here("tables",
"decision_tree_ondansetron_probabilistic_CEA_results.csv"))
plot(df_cea_psa)
ceac_obj <- ceac(wtp = v_wtp, psa = l_psa)
# Regions of highest probability of cost-effectiveness for each strategy
summary(ceac_obj)
# CEAC & CEAF plot
plot(ceac_obj)
elc_obj <- calc_exp_loss(wtp = v_wtp, psa = l_psa)
elc_obj
# ELC plot
plot(elc_obj, log_y = FALSE)
evpi <- calc_evpi(wtp = v_wtp, psa = l_psa)
# EVPI plot
plot(evpi, effect_units = "QALY")
rbeta(1000,.99,0.03)
mean(rbeta(1000,.99,0.03))
