# Arguments:
# M_t:  health state occupied at cycle t (character variable)
# df_X: data frame with individual characteristics data
# Returns:
# transition probabilities for that cycle
# create matrix of state transition probabilities
m_p_t           <- matrix(0, nrow = n_states, ncol = n_i)
rownames(m_p_t) <-  v_n  # give the state names to the rows
# lookup baseline probability and rate of dying based on individual characteristics
p_HD_all <- inner_join(df_X, m_p_HD, by = c("Sex"))
p_HD     <- p_HD_all[M_t == "healthy", "p_HD"]
# update m_p_t with the appropriate probabilities
# transition probabilities when healthy
m_p_t[, M_t == "healthy"] <- rbind(1 - p_HD - p_HS, p_HS, p_HD)
# transition probabilities when sick
m_p_t[, M_t == "sick"]    <- rbind(0, 1 - p_SD, p_SD)
# transition probabilities when dead
m_p_t[, M_t == "dead"]    <- rbind(0, 0, 1)
return(t(m_p_t))
}
Costs <- function (M_t) {
# M_t: current health state
c_t <- c()
c_t[M_t == "dead"]    <- c_D     # costs at dead state
c_t[M_t == "healthy"] <- c_H     # costs accrued by being healthy this cycle
c_t[M_t == "sick"]    <- c_S     # costs accrued by being sick this cycle
return(c_t)  # return costs accrued this cycle
}
Effs <- function (M_t) {
# M_t: current health state
q_t <- c()
q_t[M_t == "dead"]    <- u_D     # QALYs at dead state
q_t[M_t == "healthy"] <- u_H     # QALYs accrued by being healthy this cycle
q_t[M_t == "sick"]    <- u_S     # QALYs accrued by being sick this cycle
return(q_t)  # return the QALYs accrued this cycle
}
MicroSim <- function(n_i, df_X, seed = 1) {
# Arguments:
# n_i:     number of individuals
# df_X:    data frame with individual data
# seed:    defauls is 1
# Returns
# a list with information about the individuals transitions, associated costs and
# effects and total costs and rewards
set.seed(seed) # set the seed
# create three matrices called m_M, m_C and m_E
# number of rows is equal to the n_i, the number of columns is equal to n_t
# (the initial state and all the n_t cycles)
# m_M is used to store the health state information over time for every individual
# m_C is used to store the costs information over time for every individual
# m_E is used to store the effects information over time for every individual
m_M <- m_C <- m_E <-  matrix(nrow = n_i, ncol = n_t + 1,
dimnames = list(paste("ind"  , 1:n_i, sep = " "),
paste("cycle", 0:n_t, sep = " ")))
m_M[, 1] <- v_M_init          # initial health state
m_C[, 1] <- Costs(m_M[, 1])   # costs accrued during cycle 0
m_E[, 1] <- Effs(m_M[, 1])    # QALYs accrued during cycle 0
# open a loop for time running cycles 1 to n_t
for (t in 1:n_t) {
# calculate the transition probabilities for the cycle based on health state t
m_P <- Probs(m_M[, t], df_X)
# sample the current health state and store that state in matrix m_M
m_M[, t + 1]  <- samplev(m_P, 1)
m_C[, t + 1]  <- Costs(m_M[, t + 1])   # calculate costs
m_E[, t + 1]  <- Effs (m_M[, t + 1])   # calculate QALYs
# Display simulation progress
if(t/(n_t/10) == round(t/(n_t/10), 0)) { # display progress every 10%
cat('\r', paste(t/n_t * 100, "% done", sep = " "))
}
} # close the loop for the time points
# calculate
tc <- m_C %*% v_dwc    # total (discounted) cost per individual
te <- m_E %*% v_dwe    # total (discounted) QALYs per individual
tc_hat <- mean(tc)     # average (discounted) cost
te_hat <- mean(te)     # average (discounted) QALYs
# store the results from the simulation in a list
results <- list(m_M = m_M, m_C = m_C, m_E = m_E, tc = tc , te = te, tc_hat = tc_hat,
te_hat = te_hat)
return(results)  # return the results
} # end of the MicroSim function
# By specifying all the arguments in the `MicroSim()` the simulation can be started
# Run the simulation model
outcomes <- MicroSim(n_i = n_i, df_X = df_X, seed = 1)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "scales", "ellipse", "ggplot2", "lazyeval", "igraph", "ggraph", "reshape2", "knitr")
# load (install if required) packages from GitHub
# install_github("DARTH-git/dampack", force = TRUE) Uncomment if there is a newer version
p_load_gh("DARTH-git/dampack")
set.seed(1)  # set the seed
# Model structure
v_n   <- c("healthy", "sick", "dead")       # vector with state names
n_states   <- length(v_n)                   # number of states
n_t   <- 60                                 # number of cycles
n_i   <- 10000                              # number of individuals
d_e <- d_c <- 0.03                          # equal discount of costs and QALYs by 3%
# calculate discount weights for costs for each cycle based on discount rate d_c
v_dwc <- 1 / (1 + d_e) ^ (0:n_t)
# calculate discount weights for effectiveness for each cycle based on discount rate d_e
v_dwe <- 1 / (1 + d_c) ^ (0:n_t)
#### Deterministic analysis ####
# Transition probabilities
p_HS        <- 0.05    # probability healthy -> sick
p_HD_female <- 0.0382  # probability health -> dead when female
p_HD_male   <- 0.0463  # probability health -> dead when male
m_p_HD      <- data.frame(Sex = c("Female", "Male"), p_HD = c(p_HD_female, p_HD_male))
p_SD        <- 0.1     # probability sick -> dead
# Costs inputs
c_H  <- 1500      # cost of one cycle in healthy state
c_S  <- 5000      # cost of one cycle in sick state
c_D  <- 0
# utility inputs
u_H  <- 1         # utility when healthy
u_S  <- 0.85      # utility when sick
u_D  <- 0         # utility when dead
MicroSim <- function(n_i, df_X, seed = 1) {
# Arguments:
# n_i:     number of individuals
# df_X:    data frame with individual data
# seed:    defauls is 1
# Returns
# a list with information about the individuals transitions, associated costs and
# effects and total costs and rewards
set.seed(seed) # set the seed
# create three matrices called m_M, m_C and m_E
# number of rows is equal to the n_i, the number of columns is equal to n_t
# (the initial state and all the n_t cycles)
# m_M is used to store the health state information over time for every individual
# m_C is used to store the costs information over time for every individual
# m_E is used to store the effects information over time for every individual
m_M <- m_C <- m_E <-  matrix(nrow = n_i, ncol = n_t + 1,
dimnames = list(paste("ind"  , 1:n_i, sep = " "),
paste("cycle", 0:n_t, sep = " ")))
m_M[, 1] <- v_M_init          # initial health state
m_C[, 1] <- Costs(m_M[, 1])   # costs accrued during cycle 0
m_E[, 1] <- Effs(m_M[, 1])    # QALYs accrued during cycle 0
# open a loop for time running cycles 1 to n_t
for (t in 1:n_t) {
# calculate the transition probabilities for the cycle based on health state t
m_P <- Probs(m_M[, t], df_X)
# sample the current health state and store that state in matrix m_M
m_M[, t + 1]  <- samplev(m_P, 1)
m_C[, t + 1]  <- Costs(m_M[, t + 1])   # calculate costs
m_E[, t + 1]  <- Effs (m_M[, t + 1])   # calculate QALYs
# Display simulation progress
if(t/(n_t/10) == round(t/(n_t/10), 0)) { # display progress every 10%
cat('\r', paste(t/n_t * 100, "% done", sep = " "))
}
} # close the loop for the time points
# calculate
tc <- m_C %*% v_dwc    # total (discounted) cost per individual
te <- m_E %*% v_dwe    # total (discounted) QALYs per individual
tc_hat <- mean(tc)     # average (discounted) cost
te_hat <- mean(te)     # average (discounted) QALYs
# store the results from the simulation in a list
results <- list(m_M = m_M, m_C = m_C, m_E = m_E, tc = tc , te = te, tc_hat = tc_hat,
te_hat = te_hat)
return(results)  # return the results
} # end of the MicroSim function
# By specifying all the arguments in the `MicroSim()` the simulation can be started
# Run the simulation model
outcomes <- MicroSim(n_i = n_i, df_X = df_X, seed = 1)
samplev <- function(m.Probs, m) {
# Arguments
# m.Probs: matrix with probabilities (n.i * n.s)
# m:       number of states than need to be sampled per individual
# Return
# ran:    n.i x m matrix filled with sampled health state(s) per individual
d <- dim(m.Probs)  # dimensions of the matrix filled with the multinomical probabilities for the health states
n <- d[1]          # first dimension - number of rows (number of individuals to sample for)
k <- d[2]          # second dimension - number of columns (number of health states considered)
lev <- dimnames(m.Probs)[[2]]  # extract the names of the health states considered for sampling
if (!length(lev))  # in case names for the health states are missing, use numbers to specify the health states
lev <- 1:k       # create a sequence from 1:k (number of health states considered)
# create a matrix
ran <- matrix(lev[1], ncol = m, nrow = n) # create the matrix ran, filled with the first health state of the levels
U <- t(m.Probs)    # transposed m.Probs matrix n.i x n.s --> n.s x n.i
for(i in 2:k) {    # start loop, from the 2nd health states
U[i, ] <- U[i, ] + U[i - 1, ] # start summing the probabilities of the different health states per individual
}
if (any((U[k, ] - 1) > 1e-05))  # sum of all probs per individual - 1 should be 0 (use 1e-05 for rounding issues), else print the error statement
stop("error in multinom: probabilities do not sum to 1")
for (j in 1:m) {   # start loop of the state that needs to be sampled (m)
un <- rep(runif(n), rep(k, n))       # sample from a uniform distribution of length n*k
ran[, j] <- lev[1 + colSums(un > U)] # store the health state at the jth column of the U matrix
}
ran # return the new health state per individual n.i x m
} # close the function
source(here("functions", "Functions.R"))
source(here("functions", "Functions.R"))
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "scales", "ellipse", "ggplot2", "lazyeval", "igraph", "ggraph", "reshape2", "knitr")
# load (install if required) packages from GitHub
# install_github("DARTH-git/dampack", force = TRUE) Uncomment if there is a newer version
p_load_gh("DARTH-git/dampack")
source(here("functions", "Functions.R"))
source("Functions.R")
set.seed(1)  # set the seed
# Model structure
v_n   <- c("healthy", "sick", "dead")       # vector with state names
n_states   <- length(v_n)                   # number of states
n_t   <- 60                                 # number of cycles
n_i   <- 10000                              # number of individuals
d_e <- d_c <- 0.03                          # equal discount of costs and QALYs by 3%
# calculate discount weights for costs for each cycle based on discount rate d_c
v_dwc <- 1 / (1 + d_e) ^ (0:n_t)
# calculate discount weights for effectiveness for each cycle based on discount rate d_e
v_dwe <- 1 / (1 + d_c) ^ (0:n_t)
#### Deterministic analysis ####
# Transition probabilities
p_HS        <- 0.05    # probability healthy -> sick
p_HD_female <- 0.0382  # probability health -> dead when female
p_HD_male   <- 0.0463  # probability health -> dead when male
m_p_HD      <- data.frame(Sex = c("Female", "Male"), p_HD = c(p_HD_female, p_HD_male))
p_SD        <- 0.1     # probability sick -> dead
# Costs inputs
c_H  <- 1500      # cost of one cycle in healthy state
c_S  <- 5000      # cost of one cycle in sick state
c_D  <- 0
# utility inputs
u_H  <- 1         # utility when healthy
u_S  <- 0.85      # utility when sick
u_D  <- 0         # utility when dead
# randomly sample the sex of an individual (50% female)
v_sex <- sample(x = c("Female", "Male"), prob = c(0.5, 0.5), size = n_i, replace = TRUE)
df_X  <- data.frame(ID = 1:n_i, Sex = v_sex)
# Specify the initial health state of the individuals
# everyone begins in the healthy state (in this example)
v_M_init  <- rep("healthy", times = n_i)
Probs <- function(M_t, df_X) {
# Arguments:
# M_t:  health state occupied at cycle t (character variable)
# df_X: data frame with individual characteristics data
# Returns:
# transition probabilities for that cycle
# create matrix of state transition probabilities
m_p_t           <- matrix(0, nrow = n_states, ncol = n_i)
rownames(m_p_t) <-  v_n  # give the state names to the rows
# lookup baseline probability and rate of dying based on individual characteristics
p_HD_all <- inner_join(df_X, m_p_HD, by = c("Sex"))
p_HD     <- p_HD_all[M_t == "healthy", "p_HD"]
# update m_p_t with the appropriate probabilities
# transition probabilities when healthy
m_p_t[, M_t == "healthy"] <- rbind(1 - p_HD - p_HS, p_HS, p_HD)
# transition probabilities when sick
m_p_t[, M_t == "sick"]    <- rbind(0, 1 - p_SD, p_SD)
# transition probabilities when dead
m_p_t[, M_t == "dead"]    <- rbind(0, 0, 1)
return(t(m_p_t))
}
Costs <- function (M_t) {
# M_t: current health state
c_t <- c()
c_t[M_t == "dead"]    <- c_D     # costs at dead state
c_t[M_t == "healthy"] <- c_H     # costs accrued by being healthy this cycle
c_t[M_t == "sick"]    <- c_S     # costs accrued by being sick this cycle
return(c_t)  # return costs accrued this cycle
}
Effs <- function (M_t) {
# M_t: current health state
q_t <- c()
q_t[M_t == "dead"]    <- u_D     # QALYs at dead state
q_t[M_t == "healthy"] <- u_H     # QALYs accrued by being healthy this cycle
q_t[M_t == "sick"]    <- u_S     # QALYs accrued by being sick this cycle
return(q_t)  # return the QALYs accrued this cycle
}
MicroSim <- function(n_i, df_X, seed = 1) {
# Arguments:
# n_i:     number of individuals
# df_X:    data frame with individual data
# seed:    defauls is 1
# Returns
# a list with information about the individuals transitions, associated costs and
# effects and total costs and rewards
set.seed(seed) # set the seed
# create three matrices called m_M, m_C and m_E
# number of rows is equal to the n_i, the number of columns is equal to n_t
# (the initial state and all the n_t cycles)
# m_M is used to store the health state information over time for every individual
# m_C is used to store the costs information over time for every individual
# m_E is used to store the effects information over time for every individual
m_M <- m_C <- m_E <-  matrix(nrow = n_i, ncol = n_t + 1,
dimnames = list(paste("ind"  , 1:n_i, sep = " "),
paste("cycle", 0:n_t, sep = " ")))
m_M[, 1] <- v_M_init          # initial health state
m_C[, 1] <- Costs(m_M[, 1])   # costs accrued during cycle 0
m_E[, 1] <- Effs(m_M[, 1])    # QALYs accrued during cycle 0
# open a loop for time running cycles 1 to n_t
for (t in 1:n_t) {
# calculate the transition probabilities for the cycle based on health state t
m_P <- Probs(m_M[, t], df_X)
# sample the current health state and store that state in matrix m_M
m_M[, t + 1]  <- samplev(m_P, 1)
m_C[, t + 1]  <- Costs(m_M[, t + 1])   # calculate costs
m_E[, t + 1]  <- Effs (m_M[, t + 1])   # calculate QALYs
# Display simulation progress
if(t/(n_t/10) == round(t/(n_t/10), 0)) { # display progress every 10%
cat('\r', paste(t/n_t * 100, "% done", sep = " "))
}
} # close the loop for the time points
# calculate
tc <- m_C %*% v_dwc    # total (discounted) cost per individual
te <- m_E %*% v_dwe    # total (discounted) QALYs per individual
tc_hat <- mean(tc)     # average (discounted) cost
te_hat <- mean(te)     # average (discounted) QALYs
# store the results from the simulation in a list
results <- list(m_M = m_M, m_C = m_C, m_E = m_E, tc = tc , te = te, tc_hat = tc_hat,
te_hat = te_hat)
return(results)  # return the results
} # end of the MicroSim function
# By specifying all the arguments in the `MicroSim()` the simulation can be started
# Run the simulation model
outcomes <- MicroSim(n_i = n_i, df_X = df_X, seed = 1)
# Show results
results  <- data.frame("Total Cost" = outcomes$tc_hat, "Total QALYs" = outcomes$te_hat)
results
options(scipen = 999)
plot(density(outcomes$tc), main = paste("Total cost per person"), xlab = "Cost ($)")
plot(density(outcomes$te), main = paste("Total QALYs per person"), xlab = "QALYs")
plot_m_TR(outcomes$m_M)    # health state trace
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "scales", "ellipse", "ggplot2", "lazyeval", "igraph", "ggraph", "reshape2", "knitr")
# load (install if required) packages from GitHub
# install_github("DARTH-git/dampack", force = TRUE) Uncomment if there is a newer version
p_load_gh("DARTH-git/dampack")
source("Functions.R")
set.seed(1)  # set the seed
# Model structure
v_n   <- c("healthy", "sick", "dead")       # vector with state names
n_states   <- length(v_n)                   # number of states
n_t   <- 60                                 # number of cycles
n_i   <- 10000                              # number of individuals
d_e <- d_c <- 0.03                          # equal discount of costs and QALYs by 3%
# calculate discount weights for costs for each cycle based on discount rate d_c
v_dwc <- 1 / (1 + d_e) ^ (0:n_t)
# calculate discount weights for effectiveness for each cycle based on discount rate d_e
v_dwe <- 1 / (1 + d_c) ^ (0:n_t)
# Transition probabilities
p_HS        <- 0.05    # probability healthy -> sick
p_HD_female <- 0.0382  # probability health -> dead when female
p_HD_male   <- 0.0463  # probability health -> dead when male
data.frame(Sex = c("Female", "Male"), p_HD = c(p_HD_female, p_HD_male))
m_p_HD      <- data.frame(Sex = c("Female", "Male"), p_HD = c(p_HD_female, p_HD_male))
m_p_HD
p_SD        <- 0.1     # probability sick -> dead
# Costs inputs
c_H  <- 1500      # cost of one cycle in healthy state
c_S  <- 5000      # cost of one cycle in sick state
c_D  <- 0
# utility inputs
u_H  <- 1         # utility when healthy
u_S  <- 0.85      # utility when sick
u_D  <- 0         # utility when dead
# randomly sample the sex of an individual (50% female)
v_sex <- sample(x = c("Female", "Male"), prob = c(0.5, 0.5), size = n_i, replace = TRUE)
# randomly sample the sex of an individual (50% female)
v_sex <- sample(x = c("Female", "Male"), prob = c(0.5, 0.5), size = n_i, replace = TRUE)
v_sex
df_X  <- data.frame(ID = 1:n_i, Sex = v_sex)
df_X[1:10,]
v_M_init  <- rep("healthy", times = n_i)
# create matrix of state transition probabilities
m_p_t           <- matrix(0, nrow = n_states, ncol = n_i)
head(m_p_t)
m_p_t[, 1:4]
rownames(m_p_t) <-  v_n
m_p_t[, 1:4]
m_p_HD
m_p_HD
p_HD_all <- inner_join(df_X, m_p_HD, by = c("Sex"))
p_HD_all[1:4]
p_HD_all
p_HD     <- p_HD_all[M_t == "healthy", "p_HD"]
# lookup baseline probability and rate of dying based on individual characteristics
p_HD_all <- inner_join(df_X, m_p_HD, by = c("Sex"))
p_HD     <- p_HD_all[M_t == "healthy", "p_HD"]
# create matrix of state transition probabilities
m_p_t           <- matrix(0, nrow = n_states, ncol = n_i)
rownames(m_p_t) <-  v_n  # give the state names to the rows
# lookup baseline probability and rate of dying based on individual characteristics
p_HD_all <- inner_join(df_X, m_p_HD, by = c("Sex"))
p_HD     <- p_HD_all[M_t == "healthy", "p_HD"]
Costs <- function (M_t) {
# M_t: current health state
c_t <- c()
c_t[M_t == "dead"]    <- c_D     # costs at dead state
c_t[M_t == "healthy"] <- c_H     # costs accrued by being healthy this cycle
c_t[M_t == "sick"]    <- c_S     # costs accrued by being sick this cycle
return(c_t)  # return costs accrued this cycle
}
Effs <- function (M_t) {
# M_t: current health state
q_t <- c()
q_t[M_t == "dead"]    <- u_D     # QALYs at dead state
q_t[M_t == "healthy"] <- u_H     # QALYs accrued by being healthy this cycle
q_t[M_t == "sick"]    <- u_S     # QALYs accrued by being sick this cycle
return(q_t)  # return the QALYs accrued this cycle
}
m_M <- m_C <- m_E <-  matrix(nrow = n_i, ncol = n_t + 1,
dimnames = list(paste("ind"  , 1:n_i, sep = " "),
paste("cycle", 0:n_t, sep = " ")))
m_M[1:4, 1:10]
m_M[, 1] <- v_M_init
m_M[1:4, 1:10]
m_C[, 1] <- Costs(m_M[, 1])
m_C[1:4, 1:10]
m_E[, 1] <- Effs(m_M[, 1])
m_E[1:4, 1:10]
m_P <- Probs(m_M[, t], df_X)
t=1
# calculate the transition probabilities for the cycle based on health state t
m_P <- Probs(m_M[, t], df_X)
Probs <- function(M_t, df_X) {
# Arguments:
# M_t:  health state occupied at cycle t (character variable)
# df_X: data frame with individual characteristics data
# Returns:
# transition probabilities for that cycle
# create matrix of state transition probabilities
m_p_t           <- matrix(0, nrow = n_states, ncol = n_i)
rownames(m_p_t) <-  v_n  # give the state names to the rows
# lookup baseline probability and rate of dying based on individual characteristics
p_HD_all <- inner_join(df_X, m_p_HD, by = c("Sex"))
p_HD     <- p_HD_all[M_t == "healthy", "p_HD"]
# update m_p_t with the appropriate probabilities
# transition probabilities when healthy
m_p_t[, M_t == "healthy"] <- rbind(1 - p_HD - p_HS, p_HS, p_HD)
# transition probabilities when sick
m_p_t[, M_t == "sick"]    <- rbind(0, 1 - p_SD, p_SD)
# transition probabilities when dead
m_p_t[, M_t == "dead"]    <- rbind(0, 0, 1)
return(t(m_p_t))
}
Costs <- function (M_t) {
# M_t: current health state
c_t <- c()
c_t[M_t == "dead"]    <- c_D     # costs at dead state
c_t[M_t == "healthy"] <- c_H     # costs accrued by being healthy this cycle
c_t[M_t == "sick"]    <- c_S     # costs accrued by being sick this cycle
return(c_t)  # return costs accrued this cycle
}
Effs <- function (M_t) {
# M_t: current health state
q_t <- c()
q_t[M_t == "dead"]    <- u_D     # QALYs at dead state
q_t[M_t == "healthy"] <- u_H     # QALYs accrued by being healthy this cycle
q_t[M_t == "sick"]    <- u_S     # QALYs accrued by being sick this cycle
return(q_t)  # return the QALYs accrued this cycle
}
m_P <- Probs(m_M[, t], df_X)
m_P[, 1:10]
m_P[1:10, ]
# sample the current health state and store that state in matrix m_M
m_M[, t + 1]  <- samplev(m_P, 1)
m_C[, t + 1]  <- Costs(m_M[, t + 1])   # calculate costs
m_E[, t + 1]  <- Effs (m_M[, t + 1])   # calculate QALYs
m_M[1:4, 1:10]
m_M[11:30, 1:3]
MicroSim <- function(n_i, df_X, seed = 1) {
# Arguments:
# n_i:     number of individuals
# df_X:    data frame with individual data
# seed:    defauls is 1
# Returns
# a list with information about the individuals transitions, associated costs and
# effects and total costs and rewards
set.seed(seed) # set the seed
# create three matrices called m_M, m_C and m_E
# number of rows is equal to the n_i, the number of columns is equal to n_t
# (the initial state and all the n_t cycles)
# m_M is used to store the health state information over time for every individual
# m_C is used to store the costs information over time for every individual
# m_E is used to store the effects information over time for every individual
m_M <- m_C <- m_E <-  matrix(nrow = n_i, ncol = n_t + 1,
dimnames = list(paste("ind"  , 1:n_i, sep = " "),
paste("cycle", 0:n_t, sep = " ")))
m_M[, 1] <- v_M_init          # initial health state
m_C[, 1] <- Costs(m_M[, 1])   # costs accrued during cycle 0
m_E[, 1] <- Effs(m_M[, 1])    # QALYs accrued during cycle 0
# open a loop for time running cycles 1 to n_t
for (t in 1:n_t) {
# calculate the transition probabilities for the cycle based on health state t
m_P <- Probs(m_M[, t], df_X)
# sample the current health state and store that state in matrix m_M
m_M[, t + 1]  <- samplev(m_P, 1)
m_C[, t + 1]  <- Costs(m_M[, t + 1])   # calculate costs
m_E[, t + 1]  <- Effs (m_M[, t + 1])   # calculate QALYs
# Display simulation progress
if(t/(n_t/10) == round(t/(n_t/10), 0)) { # display progress every 10%
cat('\r', paste(t/n_t * 100, "% done", sep = " "))
}
} # close the loop for the time points
# calculate
tc <- m_C %*% v_dwc    # total (discounted) cost per individual
te <- m_E %*% v_dwe    # total (discounted) QALYs per individual
tc_hat <- mean(tc)     # average (discounted) cost
te_hat <- mean(te)     # average (discounted) QALYs
# store the results from the simulation in a list
results <- list(m_M = m_M, m_C = m_C, m_E = m_E, tc = tc , te = te, tc_hat = tc_hat,
te_hat = te_hat)
return(results)  # return the results
} # end of the MicroSim function
outcomes <- MicroSim(n_i = n_i, df_X = df_X, seed = 1)
outcomes$tc_hat
outcomes$te
options(scipen = 999)
plot(density(outcomes$tc), main = paste("Total cost per person"), xlab = "Cost ($)")
plot(density(outcomes$te), main = paste("Total QALYs per person"), xlab = "QALYs")
plot_m_TR(outcomes$m_M)    # health state trace
