"0","MicroSim <- function(n_i, df_X, seed = 1) {"
"0","# Arguments:  "
"0","  # n_i:     number of individuals"
"0","  # df_X:    data frame with individual data "
"0","  # seed:    defauls is 1"
"0","# Returns"
"0","  # a list with information about the individuals transitions, associated costs and "
"0","  # effects and total costs and rewards "
"0","  "
"0","  set.seed(seed) # set the seed"
"0","  "
"0","  # create three matrices called m_M, m_C and m_E"
"0","  # number of rows is equal to the n_i, the number of columns is equal to n_t "
"0","  # (the initial state and all the n_t cycles)"
"0","  # m_M is used to store the health state information over time for every individual"
"0","  # m_C is used to store the costs information over time for every individual"
"0","  # m_E is used to store the effects information over time for every individual"
"0","  "
"0","  m_M <- m_C <- m_E <-  matrix(nrow = n_i, ncol = n_t + 1, "
"0","                                       dimnames = list(paste(""ind""  , 1:n_i, sep = "" ""), "
"0","                                                       paste(""cycle"", 0:n_t, sep = "" "")))  "
"0"," "
"0","  m_M[, 1] <- v_M_init          # initial health state "
"0","  m_C[, 1] <- Costs(m_M[, 1])   # costs accrued during cycle 0"
"0","  m_E[, 1] <- Effs(m_M[, 1])    # QALYs accrued during cycle 0"
"0","  "
"0","  # open a loop for time running cycles 1 to n_t "
"0","  for (t in 1:n_t) {"
"0","    # calculate the transition probabilities for the cycle based on health state t"
"0","    m_P <- Probs(m_M[, t], df_X)        "
"0","    # sample the current health state and store that state in matrix m_M "
"0","    m_M[, t + 1]  <- samplev(m_P)       "
"0","    m_C[, t + 1]  <- Costs(m_M[, t + 1])   # calculate costs "
"0","    m_E[, t + 1]  <- Effs (m_M[, t + 1])   # calculate QALYs "
"0","    "
"0","    # Display simulation progress"
"0","    if(t/(n_t/10) == round(t/(n_t/10), 0)) { # display progress every 10%"
"0","      cat('\r', paste(t/n_t * 100, ""% done"", sep = "" ""))"
"0","    }"
"0","    "
"0","  } # close the loop for the time points "
"0","  "
"0","  # calculate  "
"0","  tc <- m_C %*% v_dwc    # total (discounted) cost per individual"
"0","  te <- m_E %*% v_dwe    # total (discounted) QALYs per individual "
"0","  tc_hat <- mean(tc)     # average (discounted) cost "
"0","  te_hat <- mean(te)     # average (discounted) QALYs"
"0","  "
"0","  # store the results from the simulation in a list"
"0","  results <- list(m_M = m_M, m_C = m_C, m_E = m_E, tc = tc , te = te, tc_hat = tc_hat, "
"0","                  te_hat = te_hat)   "
"0","  "
"0","  return(results)  # return the results"
"0",""
"0","} # end of the MicroSim function  "
"0",""
"0","# By specifying all the arguments in the `MicroSim()` the simulation can be started"
"0",""
"0","# Run the simulation model"
"0","outcomes <- MicroSim(n_i = n_i, df_X = df_X, seed = 1)"
"1",""
"1"," "
"1","10 % done"
"1",""
"1"," "
"1","20 % done"
"1",""
"1"," "
"1","30 % done"
"1",""
"1"," "
"1","40 % done"
"1",""
"1"," "
"1","50 % done"
"1",""
"1"," "
"1","60 % done"
"1",""
"1"," "
"1","70 % done"
"1",""
"1"," "
"1","80 % done"
"1",""
"1"," "
"1","90 % done"
"1",""
"1"," "
"1","100 % done"
"0","# Show results"
"0","results  <- data.frame(""Total Cost"" = outcomes$tc_hat, ""Total QALYs"" = outcomes$te_hat)"
"0","results"
