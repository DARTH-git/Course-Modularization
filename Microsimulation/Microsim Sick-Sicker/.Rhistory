# sample the current health state and store that state in matrix m_M
m_M[, t + 1]  <- samplev(m_P, 1)
# calculate costs per individual during cycle t + 1
m_C[, t + 1]  <- Costs(m_M[, t + 1], Trt)
# calculate QALYs per individual during cycle t + 1
m_E[, t + 1]  <- Effs(m_M[, t + 1], df_X, Trt)
# update the age of individuals that are alive
df_X$Age[m_M[, t + 1] != "D"] <- df_X$Age[m_M[, t + 1] != "D"] + 1
# Display simulation progress
if(t/(n_t/10) == round(t/(n_t/10), 0)) { # display progress every 10%
cat('\r', paste(t/n_t * 100, "% done", sep = " "))
}
} # close the loop for the time points
# calculate
tc <- m_C %*% v_dwc    # total (discounted) cost per individual
te <- m_E %*% v_dwe    # total (discounted) QALYs per individual
tc_hat <- mean(tc)     # average (discounted) cost
te_hat <- mean(te)     # average (discounted) QALYs
# store the results from the simulation in a list
results <- list(m_M = m_M, m_C = m_C, m_E = m_E, tc = tc , te = te, tc_hat = tc_hat,
te_hat = te_hat)
return(results)  # return the results
} # end of the MicroSim function
# By specifying all the arguments in the `MicroSim()` the simulation can be started
# In this example the outcomes are of the simulation are stored in the variables `outcomes_no_tr` and `outcomes_trt`.
# Run the simulation for both no treatment and treatment options
outcomes_no_trt  <- MicroSim(n_i, df_X, Trt = FALSE, seed = 1)
outcomes_trt     <- MicroSim(n_i, df_X, Trt = TRUE,  seed = 1)
options(scipen = 999)
options(scipen = 999)
# No treatment
plot(density(outcomes_no_trt$tc), main = paste("Total cost per person"), xlab = "Cost ($)")
plot(density(outcomes_no_trt$te), main = paste("Total QALYs per person"), xlab = "QALYs")
plot_m_TR(outcomes_no_trt$m_M)  # health state trace
# Treatment
plot(density(outcomes_trt$tc), main = paste("Total cost per person"), xlab = "Cost ($)")
plot(density(outcomes_trt$te), main = paste("Total QALYs per person"), xlab = "QALYs")
plot_m_TR(outcomes_trt$m_M)     # health state trace
# store the mean costs of each strategy in a new variable C (vector of costs)
v_C <- c(outcomes_no_trt$tc_hat, outcomes_trt$tc_hat)
# store the mean QALYs of each strategy in a new variable E (vector of effects)
v_E <- c(outcomes_no_trt$te_hat, outcomes_trt$te_hat)
# use dampack to calculate the ICER
calculate_icers(cost       = v_C,
effect     = v_E,
strategies = v_names_str)
p_S1D
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "scales", "ellipse", "ggplot2", "lazyeval", "igraph", "ggraph", "reshape2", "knitr")
# load (install if required) packages from GitHub
# install_github("DARTH-git/dampack", force = TRUE) Uncomment if there is a newer version
p_load_gh("DARTH-git/dampack")
source(here("functions", "Functions.R"))
set.seed(1)  # set the seed
# Model structure
n_t   <- 30                       # time horizon, 30 cycles
n_i   <- 100000                   # number of simulated individuals
v_n   <- c("H", "S1", "S2", "D")  # the model states names
n_states   <- length(v_n)              # the number of health states
d_r   <- 0.03                     # discount rate of 3% per cycle
v_dwe <- v_dwc <- 1 / ((1 + d_r) ^ (0:n_t))    # discount weight
v_names_str <- c("no treatment", "treatment")  # strategy names
n_str <- length(v_names_str)      # number of strategies
### Event probabilities (per cycle)
# Annual transition probabilities
p_HS1   <- 0.15                   # probability of becoming sick when healthy
p_S1H   <- 0.5                    # probability of recovering to healthy when sick
p_S1S2  <- 0.105                  # probability of becoming sicker when sick
# Annual probabilities of death
# load age dependent probability
p_mort   <- read.csv(here("data", "mortProb_age.csv"))
# load age distribution
dist_Age <- read.csv(here("data", "MyPopulation-AgeDistribution.csv"))
# probability to die in S1 by cycle (is increasing)
p_S1D    <- c(0.0149, 0.018, 0.021, 0.026, 0.031, rep(0.037, n_t - 5))
#p_S1D    <- rep(0.0149, n_t)          # probability to die in S1 by cycle
p_S2D    <- 0.048           # probability to die in S2
# Cost inputs
c_H     <- 2000             # cost of one cycle in the healthy state
c_S1    <- 4000             # cost of one cycle in the sick state
c_S2    <- 15000            # cost of one cycle in the sicker state
c_D     <- 0                # cost of one cycle in the dead state
c_Trt   <- 12000            # cost of treatment (per cycle)
# Utility inputs
u_H     <- 1                # utility when healthy
u_S1    <- 0.75             # utility when sick
u_S2    <- 0.5              # utility when sicker
u_D     <- 0                # utility when dead
u_Trt   <- 0.95             # utility when sick and being treated
v_x     <- runif(n_i, min = 0.95, max = 1.05) # treatment effect modifier at baseline
# sample from age distribution an initial age for every individual
v_age0  <- sample(x = dist_Age$age, prob = dist_Age$prop, size = n_i, replace = TRUE)
# a vector with the time of being sick at the start of the model
# Specify the initial health state of the individuals
# everyone begins in the healthy state (in this example)
# a vector with the initial health state for all individuals
v_M_init  <- rep("H", n_i)
v_Ts_init <- rep(0, n_i)         # since all individuals start healthy this value is zero for everyone
df_X    <- data.frame(ID = 1:n_i, x = v_x, Age = v_age0, n_ts = v_Ts_init) # create a dataframe with an ID number for every individual, the individual treatment effect modifier and the age of the individuals
Probs <- function(M_t, df_X, t) {
# Arguments:
# M_t: health state occupied by individual i at cycle t (character variable)
# df_X:     data frame with individual characteristics data
# t:     current cycle
# Returns:
#   transition probabilities for that cycle
# create matrix of state transition probabilities
m_p_t           <- matrix(0, nrow = n_states, ncol = n_i)
rownames(m_p_t) <-  v_n  # give the state names to the rows
# lookup baseline probability and rate of dying based on individual characteristics
p_HD_all <- inner_join(df_X, p_mort, by = c("Age"))
p_HD     <- p_HD_all[M_t == "H","p_HD"]
# update the m_p with the appropriate probabilities
# transition probabilities when healthy
m_p_t[, M_t == "H"]  <- rbind(1 - p_HS1 - p_HD, p_HS1, 0, p_HD)
# transition probabilities when sick
m_p_t[, M_t == "S1"] <- rbind(p_S1H, 1 - p_S1H - p_S1S2 - p_S1D[df_X$n_ts], p_S1S2, p_S1D[df_X$n_ts])
# transition probabilities when sicker
m_p_t[, M_t == "S2"] <- rbind(0, 0, 1 - p_S2D, p_S2D)
# transition probabilities when dead
m_p_t[, M_t == "D"]  <- rbind(0, 0, 0, 1)
return(t(m_p_t))
}
Costs <- function (M_t, Trt = FALSE) {
# M_t: health state occupied by individual i at cycle t (character variable)
# Trt:  is the individual being treated? (default is FALSE)
c_t <- 0                                 # by default the cost for everyone is zero
c_t[M_t == "H"]  <- c_H                  # update the cost if healthy
c_t[M_t == "S1"] <- c_S1 + c_Trt * Trt   # update the cost if sick conditional on treatment
c_t[M_t == "S2"] <- c_S2 + c_Trt * Trt   # update the cost if sicker conditional on treatment
c_t[M_t == "D"]  <- c_D                  # update the cost if dead
return(c_t)        		                   # return the costs
}
Effs <- function (M_t, df_X, Trt = FALSE, cl = 1) {
# M_t: health state occupied by individual i at cycle t (character variable)
# df_X: data frame with individual characteristics data
# Trt:  is the individual treated? (default is FALSE)
# cl:   cycle length (default is 1)
u_t <- 0                                 # by default the utility for everyone is zero
u_t[M_t == "H"]  <- u_H                  # update the utility if healthy
u_t[M_t == "S1" & Trt == FALSE] <- u_S1  # update the utility if sick
# update the utility if sick but on treatment (adjust for individual effect modifier)
u_t[M_t == "S1" & Trt == TRUE]  <- u_Trt * df_X$x[M_t == "S1"]
u_t[M_t == "S2"] <- u_S2                 # update the utility if sicker
u_t[M_t == "D"]  <- u_D                  # update the utility if dead
QALYs <-  u_t * cl  # calculate the QALYs during cycle t
return(QALYs)       # return the QALYs
}
MicroSim <- function(n_i, df_X, Trt = FALSE, seed = 1) {
# Arguments:
# n_i:     number of individuals
# df_X     data frame with individual characteristics data
# Trt:     is this the individual receiving treatment? (default is FALSE)
# seed:    default is 1
set.seed(seed) # set the seed
n_states <- length(v_n) # the number of health states
# create three matrices called m_M, m_C and m_E
# number of rows is equal to the n_i, the number of columns is equal to n_t
# (the initial state and all the n_t cycles)
# m_M is used to store the health state information over time for every individual
# m_C is used to store the costs information over time for every individual
# m_E is used to store the effects information over time for every individual
m_M <- m_C <- m_E <- m_Ts <-  matrix(nrow = n_i, ncol = n_t + 1,
dimnames = list(paste("ind"  , 1:n_i, sep = " "),
paste("cycle", 0:n_t, sep = " ")))
m_M [, 1] <- v_M_init    # initial health state at cycle 0 for individual i
# calculate costs per individual during cycle 0
m_C[, 1]  <- Costs(m_M[, 1], Trt)
# calculate QALYs per individual during cycle 0
m_E[, 1]  <- Effs (m_M[, 1], df_X, Trt)
# open a loop for time running cycles 1 to n_t
for (t in 1:n_t) {
# calculate the transition probabilities for the cycle based on  health state t
m_P <- Probs(m_M[, t], df_X, t)
# sample the current health state and store that state in matrix m_M
m_M[, t + 1]  <- samplev(m_P, 1)
# calculate costs per individual during cycle t + 1
m_C[, t + 1]  <- Costs(m_M[, t + 1], Trt)
# calculate QALYs per individual during cycle t + 1
m_E[, t + 1]  <- Effs(m_M[, t + 1], df_X, Trt)
# update time since illness onset for t + 1
df_X$n_ts <- if_else(m_M[, t + 1] == "S1", df_X$n_ts + 1, 0)
# update the age of individuals that are alive
df_X$Age[m_M[, t + 1] != "D"]  <- df_X$Age[m_M[, t + 1] != "D"] + 1
# Display simulation progress
if(t/(n_t/10) == round(t/(n_t/10), 0)) { # display progress every 10%
cat('\r', paste(t/n_t * 100, "% done", sep = " "))
}
} # close the loop for the time points
# calculate
tc <- m_C %*% v_dwc    # total (discounted) cost per individual
te <- m_E %*% v_dwe    # total (discounted) QALYs per individual
tc_hat <- mean(tc)     # average (discounted) cost
te_hat <- mean(te)     # average (discounted) QALYs
# store the results from the simulation in a list
results <- list(m_M = m_M, m_C = m_C, m_E = m_E, tc = tc , te = te, tc_hat = tc_hat,
te_hat = te_hat)
return(results)  # return the results
} # end of the MicroSim function
# By specifying all the arguments in the `MicroSim()` the simulation can be started
# In this example the outcomes are of the simulation are stored in the variables `outcomes_no_tr` and `outcomes_trt`.
# Run the simulation for both no treatment and treatment options
outcomes_no_trt  <- MicroSim(n_i, df_X, Trt = FALSE, seed = 1)
outcomes_trt     <- MicroSim(n_i, df_X, Trt = TRUE,  seed = 1)
options(scipen = 999) # disabling scientific notation in R
# No treatment
plot(density(outcomes_no_trt$tc), main = paste("Total cost per person"), xlab = "Cost ($)")
plot(density(outcomes_no_trt$te), main = paste("Total QALYs per person"), xlab = "QALYs")
plot_m_TR(outcomes_no_trt$m_M)  # health state trace
# Treatment
plot(density(outcomes_trt$tc), main = paste("Total cost per person"), xlab = "Cost ($)")
plot(density(outcomes_trt$te), main = paste("Total QALYs per person"), xlab = "QALYs")
plot_m_TR(outcomes_trt$m_M)     # health state trace
# store the mean costs of each strategy in a new variable C (vector of costs)
v_C <- c(outcomes_no_trt$tc_hat, outcomes_trt$tc_hat)
# store the mean QALYs of each strategy in a new variable E (vector of effects)
v_E <- c(outcomes_no_trt$te_hat, outcomes_trt$te_hat)
# use dampack to calculate the ICER
calculate_icers(cost       = v_C,
effect     = v_E,
strategies = v_names_str)
# Function that generates random sample for PSA
gen_psa <- function(n_sim = 1000, seed = 071818){
set.seed(seed) # set a seed to be able to reproduce the same results
df_psa <- data.frame(
# Transition probabilities (per cycle)
# NOTE: this is just a small part of all the model parameters that should be considered for PSA
p_HS1   = rbeta(n_sim, 30, 170),          # probability to become sick when healthy
p_S1H   = rbeta(n_sim, 60, 60) ,          # probability to become healthy when sick
p_S1S2  = rbeta(n_sim, 84, 716),          # probability to become sicker when sick
p_S2D   = rbeta(n_sim, 22, 434),          # probability to die in S2
# Cost vectors with length n_sim
# cost of remaining one cycle in state H
c_H     = rgamma(n_sim, shape = 100, scale = 20)    ,
# cost of remaining one cycle in state S1
c_S1    = rgamma(n_sim, shape = 177.8, scale = 22.5),
# cost of remaining one cycle in state S2
c_S2    = rgamma(n_sim, shape = 225, scale = 66.7)  ,
# cost of treatment (per cycle)
c_trt   = rgamma(n_sim, shape = 73.5, scale = 163.3),
# cost of being in the death state
c_D     = 0                                         ,
# Utility vectors with length n_sim
u_H   = rbeta(n_sim, shape1 = 200, shape2 = 3),   # utility when healthy
u_S1  = rbeta(n_sim, shape1 = 130, shape2 = 45),  # utility when sick
u_S2  = rbeta(n_sim, shape1 = 230, shape2 = 230), # utility when sicker
u_D   = 0                                       , # utility when dead
u_Trt = rbeta(n_sim, shape1 = 300, shape2 = 15),  # utility when being treated
lb_eff  = 0.95,                           # lower bound of effect modifier
ub_eff  = 1.05                            # upper bound of effect modifier
)
return(df_psa)
}
# Try it
gen_psa(10)
# Decrease number of individuals since PSA takes a lot of time
n_i <- 1000
# update Sample individual level characteristics
# Dynamic characteristics
# Specify the initial health state of the individuals
# everyone begins in the healthy state (in this example)
v_M_init  <- rep("H", n_i)    # a vector with the initial health state for all individuals
# Number of simulations
n_sim <- 500
# Generate PSA input dataset
df_psa_input <- gen_psa(n_sim = n_sim)
# First six observations
head(df_psa_input)
## Histogram of parameters
# Make sure the Plots window is large enough to plot all the histograms
ggplot(melt(df_psa_input, variable.name = "Parameter"), aes(x = value)) +
facet_wrap(~Parameter, scales = "free") +
geom_histogram(aes(y = ..density..)) +
theme_bw(base_size = 16)
# Initialize dataframes with PSA output
# Dataframe of costs
df_c <- as.data.frame(matrix(0,
nrow = n_sim,
ncol = n_str))
colnames(df_c) <- v_names_str
# Dataframe of effectiveness
df_e <- as.data.frame(matrix(0,
nrow = n_sim,
ncol = n_str))
colnames(df_e) <- v_names_str
source(here("functions", "Function_Microsim_Sick-Sicker_time.R"))
# Test microsimulation function
calculate_ce_out(df_psa_input[1,])
for(i in 1:n_sim){
df_ce_psa <- calculate_ce_out(df_psa_input[i, ])
df_c[i, ] <- df_ce_psa$Cost   # take the cost from the psa run and store in df_c
df_e[i, ] <- df_ce_psa$Effect # take the cost from the psa run in store in a df_e
# Display simulation progress
if(i/(n_sim/10) == round(i/(n_sim/10),0)) { # display progress every 10%
cat('\r', paste('            ', 'Overall progress: ', i/n_sim * 100, "% done",
sep = " "))
}
}
### Creae PSA object for dampack
l_psa <- make_psa_obj(cost = df_c,
effectiveness = df_e,
parameters = df_psa_input,
strategies = v_names_str)
#---------------------------------------------------------------------------#
#### R function to sample states for multiple individuals simultaneously ####
#---------------------------------------------------------------------------#
# - Krijkamp EM, Alarid-Escudero F, Enns EA, Jalal HJ, Hunink MGM, Pechlivanoglou P.
# Microsimulation modeling for health decision sciences using R: A tutorial.
# Med Decis Making. 2018;38(3):400–22. https://www.ncbi.nlm.nih.gov/pubmed/29587047
#####################################################################################
# Copyright 2017, THE HOSPITAL FOR SICK CHILDREN AND THE COLLABORATING INSTITUTIONS.
# All rights reserved in Canada, the United States and worldwide.
# Copyright, trademarks, trade names and any and all associated intellectual property
# are exclusively owned by THE HOSPITAL FOR SICK CHILDREN and the collaborating
# institutions and may not be used, reproduced, modified, distributed or adapted
# in any way without appropriate citation.
#####################################################################################
# Developed by Petros Pechlivanoglou
samplev <- function(m.Probs) {
# Arguments
# m.Probs: matrix with probabilities (n.i * n.s)
# Return
# ran: n.i x m matrix filled with sampled health state(s) per individual
d <- dim(m.Probs) # dimensions of the matrix filled with the multinomical probabilities for the health states
n <- d[1] # first dimension - number of rows (number of individuals to sample for)
k <- d[2] # second dimension - number of columns (number of health states considered)
lev <- dimnames(m.Probs)[[2]] # extract the names of the health states considered for sampling
if (!length(lev)) # in case names for the health states are missing, use numbers to specify the health states
lev <- 1:k # create a sequence from 1:k (number of health states considered)
# create a matrix
ran <- rep(lev[1], n) # create the matrix ran, filled with the first health state of the levels
U <- t(m.Probs) # transposed m.Probs matrix n.i x n.s --> n.s x n.i
for(i in 2:k) { # start loop, from the 2nd health states
U[i, ] <- U[i, ] + U[i - 1, ] # start summing the probabilities of the different health states per individual
}
if (any((U[k, ] - 1) > 1e-05)) # sum of all probs per individual - 1 should be 0 (use 1e-05 for rounding issues), else print the error statement
stop("error in multinom: probabilities do not sum to 1")
un <- rep(runif(n), rep(k, n)) # sample from a uniform distribution of length n*k
ran <- lev[1 + colSums(un > U)] # store the health state at the jth column of the U matrix
ran # return the new health state per individual n.i x m
} # close the function
#####################################################################################
# plot health state trace
plot_m_TR <- function(m_M) {
# plot the distribution of the population across health states over time (trace)
# count the number of individuals in each health state at each cycle
m_TR <- t(apply(m_M, 2, function(x) table(factor(x, levels = v_n, ordered = TRUE))))
m_TR <- m_TR / n_i                                       # calculate the proportion of individuals
colnames(m_TR) <- v_n                                    # name the rows of the matrix
rownames(m_TR) <- paste("Cycle", 0:n_t, sep = " ")       # name the columns of the matrix
# Plot trace of first health state
matplot(m_TR, type = "l", main = "Health state trace", col= 1:n_states,
ylim = c(0, 1), ylab = "Proportion of cohort", xlab = "Cycle")
legend("topright", v_n, col = 1:n_states,    # add a legend to current plot
lty = rep(1, 3), bty = "n", cex = 0.65)
}
#-----------------------------------------------------------------------------------------------#
#### R function to extract the parameters of a beta distribution from mean and st. deviation ####
#-----------------------------------------------------------------------------------------------#
#' @param m mean
#' @param s standard deviation
#'
betaPar <- function(m, s)
{
a <- m * ((m * (1 - m) / s ^ 2) - 1)
b <- (1 - m) * ((m * (1 - m) / s ^ 2) - 1)
list(a = a, b = b)
}
#-------------------------------------------------------------------------------------------------#
#### R function to extract the parameters of a gamma distribution from mean and st. deviation  ####
#-------------------------------------------------------------------------------------------------#
#' @param m mean
#' @param s standard deviation
#'
gammaPar <- function(m, s) {
# m: mean
# s: standard deviation
shape <- m ^ 2 / s ^ 2
scale <- s ^ 2 / m
list(shape = shape, scale = scale)
}
#----------------------------------------------------------------------------#
####   Function to check if transition probability array/matrix  is valid ####
#----------------------------------------------------------------------------#
#' Check if transition array is valid
#'
#' \code{check_transition_probability} checks if transition probabilities are in \[0, 1\].
#'
#' @param a_P A transition probability array or matrix.
#' @param err_stop Logical variable to stop model run if set up as TRUE. Default = FALSE.
#' @param verbose Logical variable to indicate print out of messages.
#' Default = FALSE
#'
#' @return
#' This function stops if transition probability array is not valid and shows
#' what are the entries that are not valid
#' @import utils
#' @export
check_transition_probability <- function(a_P,
err_stop = FALSE,
verbose = FALSE) {
a_P <- as.array(a_P)
m_indices_notvalid <- arrayInd(which(a_P < 0 | a_P > 1),
dim(a_P))
if(dim(m_indices_notvalid)[1] != 0){
v_rows_notval   <- rownames(a_P)[m_indices_notvalid[, 1]]
v_cols_notval   <- colnames(a_P)[m_indices_notvalid[, 2]]
v_cycles_notval <- dimnames(a_P)[[3]][m_indices_notvalid[, 3]]
df_notvalid <- data.frame(`Transition probabilities not valid:` =
matrix(paste0(paste(v_rows_notval, v_cols_notval, sep = "->"),
"; at cycle ",
v_cycles_notval), ncol = 1),
check.names = FALSE)
if(err_stop) {
stop("Not valid transition probabilities\n",
paste(capture.output(df_notvalid), collapse = "\n"))
}
if(verbose){
warning("Not valid transition probabilities\n",
paste(capture.output(df_notvalid), collapse = "\n"))
}
}
}
#----------------------------------------------------------------------------#
####   Function to check if sum of transition probabilities equal to one  ####
#----------------------------------------------------------------------------#
#' Check if the sum of transition probabilities equal to one.
#'
#' \code{check_sum_of_transition_array} checks if each of the rows of the
#' transition matrices sum to one.
#'
#' @param a_P A transition probability array.
#' @param n_states Number of health states.
#' @param n_t Number of cycles.
#' @param err_stop Logical variable to stop model run if set up as TRUE.
#' Default = TRUE.
#' @param verbose Logical variable to indicate print out of messages.
#' Default = TRUE
#' @return
#' The transition probability array and the cohort trace matrix.
#' @import dplyr
#' @export
check_sum_of_transition_array <- function(a_P,
n_states,
n_t,
err_stop = TRUE,
verbose  = TRUE) {
a_P <- as.array(a_P)
d <- length(dim(a_P))
# For matrix
if (d == 2) {
valid <- sum(rowSums(a_P))
if (abs(valid - n_states)> 1e-04 ) {
if(err_stop) {
browser()
stop("This is not a valid transition Matrix")
}
if(verbose){
warning("This is not a valid transition Matrix")
}
}
} else {
# For array
valid <- (apply(a_P, d, function(x) sum(rowSums(x))) == n_states)
if (!isTRUE(all.equal(as.numeric(sum(valid)), as.numeric(n_t)))) {
if(err_stop) {
stop("This is not a valid transition Matrix")
}
if(verbose){
warning("This is not a valid transition Matrix")
}
}
}
}
#---------------------------------------------------------------------------#
#### R function to sample states for multiple individuals simultaneously ####
#---------------------------------------------------------------------------#
# Krijkamp EM, Alarid-Escudero F, Enns EA, Jalal HJ, Hunink MGM, Pechlivanoglou P.
# Microsimulation modeling for health decision sciences using R: A tutorial.
# Med Decis Making. 2018;38(3):400–22. https://www.ncbi.nlm.nih.gov/pubmed/29587047
################################################################################
# Copyright 2017, THE HOSPITAL FOR SICK CHILDREN AND THE COLLABORATING INSTITUTIONS.
# All rights reserved in Canada, the United States and worldwide.
# Copyright, trademarks, trade names and any and all associated intellectual property
# are exclusively owned by THE HOSPITAL FOR SICK CHILDREN and the collaborating
# institutions and may not be used, reproduced, modified, distributed or adapted
# in any way without appropriate citation.
#---------------------------------------------------------------------------#
####                    R functions for visualization                    ####
#---------------------------------------------------------------------------#
# plot health state trace
plot_m_TR <- function(m_M) {
# plot the distribution of the population across health states over time (trace)
# count the number of individuals in each health state at each cycle
m_TR <- t(apply(m_M, 2, function(x) table(factor(x, levels = v_n, ordered = TRUE))))
m_TR <- m_TR / n_i                                       # calculate the proportion of individuals
colnames(m_TR) <- v_n                                    # name the rows of the matrix
rownames(m_TR) <- paste("Cycle", 0:n_t, sep = " ")       # name the columns of the matrix
# Plot trace of first health state
matplot(m_TR, type = "l", main = "Health state trace", col= 1:n_states,
ylim = c(0, 1), ylab = "Proportion of cohort", xlab = "Cycle")
legend("topright", v_n, col = 1:n_states,    # add a legend to current plot
lty = rep(1, 3), bty = "n", cex = 0.65)
}
if (!require(here)) install.packages('here')
if (!require(knitr)) install.packages('knitr')
include_graphics("../figures/sick_sicker_diagram_time.png")
if (!require(here)) install.packages('here')
if (!require(knitr)) install.packages('knitr')
include_graphics("../figures/sick_sicker_diagram_time.png")
