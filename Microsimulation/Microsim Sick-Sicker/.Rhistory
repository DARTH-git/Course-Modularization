# t:     current cycle
# Returns:
#   transition probabilities for that cycle
# create matrix of state transition probabilities
m_p_t           <- matrix(0, nrow = n_s, ncol = n_i)
rownames(m_p_t) <-  v_n  # give the state names to the rows
# lookup baseline probability and rate of dying based on individual characteristics
p_HD_all <- inner_join(df_X, p_mort, by = c("Age"))
p_HD     <- p_HD_all[M_t == "H","p_HD"]
# update the m_p with the appropriate probabilities
# transition probabilities when healthy
m_p_t[, M_t == "H"]  <- rbind(1 - p_HS1 - p_HD, p_HS1, 0, p_HD)
# transition probabilities when sick
m_p_t[, M_t == "S1"] <- rbind(p_S1H, 1 - p_S1H - p_S1S2 - p_S1D[v_Ts], p_S1S2, p_S1D[v_Ts])
# transition probabilities when sicker
m_p_t[, M_t == "S2"] <- rbind(0, 0, 1 - p_S2D, p_S2D)
# transition probabilities when dead
m_p_t[, M_t == "D"]  <- rbind(0, 0, 0, 1)
return(t(m_p_t))
}
Costs <- function (M_t, Trt = FALSE) {
# M_t: health state occupied by individual i at cycle t (character variable)
# Trt:  is the individual being treated? (default is FALSE)
c_t <- 0                                 # by default the cost for everyone is zero
c_t[M_t == "H"]  <- c_H                  # update the cost if healthy
c_t[M_t == "S1"] <- c_S1 + c_Trt * Trt   # update the cost if sick conditional on treatment
c_t[M_t == "S2"] <- c_S2 + c_Trt * Trt   # update the cost if sicker conditional on treatment
c_t[M_t == "D"]  <- c_D                  # update the cost if dead
return(c_t)        		                   # return the costs
}
Effs <- function (M_t, df_X, Trt = FALSE, cl = 1) {
# M_t: health state occupied by individual i at cycle t (character variable)
# df_X: data frame with individual characteristics data
# Trt:  is the individual treated? (default is FALSE)
# cl:   cycle length (default is 1)
u_t <- 0                                 # by default the utility for everyone is zero
u_t[M_t == "H"]  <- u_H                  # update the utility if healthy
u_t[M_t == "S1" & Trt == FALSE] <- u_S1  # update the utility if sick
# update the utility if sick but on treatment (adjust for individual effect modifier)
u_t[M_t == "S1" & Trt == TRUE]  <- u_Trt * df_X$x[M_t == "S1"]
u_t[M_t == "S2"] <- u_S2                 # update the utility if sicker
u_t[M_t == "D"]  <- u_D                  # update the utility if dead
QALYs <-  u_t * cl  # calculate the QALYs during cycle t
return(QALYs)       # return the QALYs
}
MicroSim <- function(n_i, df_X , Trt = FALSE, seed = 1) {
# Arguments:
# n_i:     number of individuals
# df_X     data frame with individual characteristics data
# Trt:     is this the individual receiving treatment? (default is FALSE)
# seed:    default is 1
set.seed(seed) # set the seed
n_s <- length(v_n) # the number of health states
# create three matrices called m_M, m_C and m_E
# number of rows is equal to the n_i, the number of columns is equal to n_t
# (the initial state and all the n_t cycles)
# m_M is used to store the health state information over time for every individual
# m_C is used to store the costs information over time for every individual
# m_E is used to store the effects information over time for every individual
m_M <- m_C <- m_E <- m_Ts <-  matrix(nrow = n_i, ncol = n_t + 1,
dimnames = list(paste("ind"  , 1:n_i, sep = " "),
paste("cycle", 0:n_t, sep = " ")))
m_M [, 1] <- v_M_init    # initial health state at cycle 0 for individual i
v_Ts      <- v_Ts_init   # initialize time since illnes onset for individual i
# calculate costs per individual during cycle 0
m_C[, 1]  <- Costs(m_M[, 1], Trt)
# calculate QALYs per individual during cycle 0
m_E[, 1]  <- Effs (m_M[, 1], df_X, Trt)
# open a loop for time running cycles 1 to n_t
for (t in 1:n_t) {
# calculate the transition probabilities for the cycle based on  health state t
m_P <- Probs(m_M[, t], df_X, v_Ts, t)
# sample the current health state and store that state in matrix m_M
m_M[, t + 1]  <- samplev(m_P, 1)
# calculate costs per individual during cycle t + 1
m_C[, t + 1]  <- Costs(m_M[, t + 1], Trt)
# calculate QALYs per individual during cycle t + 1
m_E[, t + 1]  <- Effs(m_M[, t + 1], df_X, Trt)
# update time since illness onset for t + 1
v_Ts <- if_else(m_M[, t + 1] == "S1", v_Ts + 1, 0)
# update the age of individuals that are alive
df_X$Age[m_M[, t + 1] != "D"]  <- df_X$Age[m_M[, t + 1] != "D"] + 1
# Display simulation progress
if(t/(n_t/10) == round(t/(n_t/10), 0)) { # display progress every 10%
cat('\r', paste(t/n_t * 100, "% done", sep = " "))
}
} # close the loop for the time points
# calculate
tc <- m_C %*% v_dwc    # total (discounted) cost per individual
te <- m_E %*% v_dwe    # total (discounted) QALYs per individual
tc_hat <- mean(tc)     # average (discounted) cost
te_hat <- mean(te)     # average (discounted) QALYs
# store the results from the simulation in a list
results <- list(m_M = m_M, m_C = m_C, m_E = m_E, tc = tc , te = te, tc_hat = tc_hat,
te_hat = te_hat)
return(results)  # return the results
} # end of the MicroSim function
# By specifying all the arguments in the `MicroSim()` the simulation can be started
# In this example the outcomes are of the simulation are stored in the variables `outcomes_no_tr` and `outcomes_trt`.
# Run the simulation for both no treatment and treatment options
outcomes_no_trt  <- MicroSim(n_i, df_X, Trt = FALSE, seed = 1)
outcomes_trt     <- MicroSim(n_i, df_X, Trt = TRUE,  seed = 1)
options(scipen = 999)
# No treatment
plot(density(outcomes_no_trt$tc), main = paste("Total cost per person"), xlab = "Cost ($)")
plot(density(outcomes_no_trt$te), main = paste("Total QALYs per person"), xlab = "QALYs")
plot_m_TR(outcomes_no_trt$m_M)  # health state trace
# Treatment
plot(density(outcomes_trt$tc), main = paste("Total cost per person"), xlab = "Cost ($)")
plot(density(outcomes_trt$te), main = paste("Total QALYs per person"), xlab = "QALYs")
plot_m_TR(outcomes_trt$m_M)     # health state trace
# store the mean costs of each strategy in a new variable C (vector of costs)
v_C <- c(outcomes_no_trt$tc_hat, outcomes_trt$tc_hat)
# store the mean QALYs of each strategy in a new variable E (vector of effects)
v_E <- c(outcomes_no_trt$te_hat, outcomes_trt$te_hat)
# use dampack to calculate the ICER
calculate_icers(cost       = v_C,
effect     = v_E,
strategies = v_names_str)
# Function that generates random sample for PSA
gen_psa <- function(n_sim = 1000, seed = 071818){
set.seed(seed) # set a seed to be able to reproduce the same results
df_psa <- data.frame(
# Transition probabilities (per cycle)
p_HS1   = rbeta(n_sim, 30, 170),          # probability to become sick when healthy
p_S1H   = rbeta(n_sim, 60, 60) ,          # probability to become healthy when sick
p_S1S2  = rbeta(n_sim, 84, 716),          # probability to become sicker when sick
p_S2D   = rbeta(n_sim, 22, 434),          # probability to die in S2
# Cost vectors with length n_sim
# cost of remaining one cycle in state H
c_H     = rgamma(n_sim, shape = 100, scale = 20)    ,
# cost of remaining one cycle in state S1
c_S1    = rgamma(n_sim, shape = 177.8, scale = 22.5),
# cost of remaining one cycle in state S2
c_S2    = rgamma(n_sim, shape = 225, scale = 66.7)  ,
# cost of treatment (per cycle)
c_trt   = rgamma(n_sim, shape = 73.5, scale = 163.3),
# cost of being in the death state
c_D     = 0                                         ,
# Utility vectors with length n_sim
u_H     = rbeta(n_sim, 9, 0.009),         # utility when healthy
u_S1    = rbeta(n_sim ,351, 117),         # utility when sick
u_S2    = rbeta(n_sim, 138, 138),         # utility when sicker
u_D     = 0,                              # utility when dead
u_trt   = rbeta(n_sim, 112, 6),           # utility when being treated
lb_eff  = 0.95,                           # lower bound of effect modifier
ub_eff  = 1.05                            # upper bound of effect modifier
)
return(df_psa)
}
# Try it
gen_psa(10)
# Decrease number of individuals since PSA takes a lot of time
n_i <- 1000
# update Sample individual level characteristics
# Dynamic characteristics
# Specify the initial health state of the individuals
# everyone begins in the healthy state (in this example)
v_M_init  <- rep("H", n_i)    # a vector with the initial health state for all individuals
v_Ts_init <- rep(0, n_i)  # a vector with the time of being sick at the start of the model
# Number of simulations
n_sim <- 500
# Generate PSA input dataset
df_psa_input <- gen_psa(n_sim = n_sim)
# First six observations
head(df_psa_input)
## Histogram of parameters
# Make sure the Plots window is large enough to plot all the histograms
ggplot(melt(df_psa_input, variable.name = "Parameter"), aes(x = value)) +
facet_wrap(~Parameter, scales = "free") +
geom_histogram(aes(y = ..density..)) +
theme_bw(base_size = 16)
# Initialize dataframes with PSA output
# Dataframe of costs
df_c <- as.data.frame(matrix(0,
nrow = n_sim,
ncol = n_str))
colnames(df_c) <- v_names_str
# Dataframe of effectiveness
df_e <- as.data.frame(matrix(0,
nrow = n_sim,
ncol = n_str))
colnames(df_e) <- v_names_str
source(here::here("functions", "Function_Microsim_Sick-Sicker_time.R"))
# Test microsimulation function
calculate_ce_out(df_psa_input[1,])
for(i in 1:n_sim){
df_out_temp <- calculate_ce_out(df_psa_input[i, ])
df_c[i, ] <- df_out_temp$Cost
df_e[i, ] <- df_out_temp$Effect
# Display simulation progress
if(i/(n_sim/10) == round(i/(n_sim/10),0)) { # display progress every 10%
cat('\r', paste('            ', 'Overall progress: ', i/n_sim * 100, "% done",
sep = " "))
}
}
v_wtp <- seq(0, 300000, by = 10000)
# use dampack to calculate the ICER
# store the mean costs of each strategy in a new variable C (vector of costs)
v_C <- c(mean(out_psa$cost$no.treatment), mean(out_psa$cost$treatment))
rm(list = ls())      # clear memory (removes all the variables from the workspace)
set.seed(1)  # set the seed
# Model structure
v_n   <- c("healthy", "sick", "dead")       # vector with state names
n_states   <- length(v_n)                   # number of states
n_t   <- 60                                 # number of cycles
n_i   <- 10000                              # number of individuals
d_e <- d_c <- 0.03                          # equal discount of costs and QALYs by 3%
# calculate discount weights for costs for each cycle based on discount rate d_c
v_dwc <- 1 / (1 + d_e) ^ (0:n_t)
# calculate discount weights for effectiveness for each cycle based on discount rate d_e
v_dwe <- 1 / (1 + d_c) ^ (0:n_t)
#### Deterministic analysis ####
# Transition probabilities
p_HS        <- 0.05    # probability healthy -> sick
p_HD_female <- 0.0382  # probability health -> dead when female
p_HD_male   <- 0.0463  # probability health -> dead when male
m_p_HD      <- data.frame(Sex = c("Female", "Male"), p_HD = c(p_HD_female, p_HD_male))
p_SD        <- 0.1     # probability sick -> dead
# Costs inputs
c_H  <- 1500      # cost of one cycle in healthy state
c_S  <- 5000      # cost of one cycle in sick state
c_D  <- 0
# utility inputs
u_H  <- 1         # utility when healthy
u_S  <- 0.85      # utility when sick
u_D  <- 0         # utility when dead
# randomly sample the sex of an individual (50% female)
v_sex <- sample(x = c("Female", "Male"), prob = c(0.5, 0.5), size = n_i, replace = TRUE)
df_X  <- data.frame(ID = 1:n_i, Sex = v_sex)
# Specify the initial health state of the individuals
# everyone begins in the healthy state (in this example)
v_M_init  <- rep("healthy", times = n_i)
df_X
df_X
m_p_HD
inner_join(df_X, m_p_HD, by = c("Sex"))
inner_join(df_X, m_p_HD, by = c("Sex"))
seq(0.003, 0.01, length.out = n_t)
matrix(NA,
nrow = n_t + 1 ,  # create Markov trace (n.t + 1 because R doesn't
# understand cycle 0)
ncol = n_states,
dimnames = list(0:n_t, v_n))
m_P_diag <- matrix(0, nrow = n_states, ncol = n_states, dimnames = list(v_n, v_n))
m_P_diag["Healthy","Sick" ]  = ""
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("diagram")
# Strategy names
v_names_str <- c("Base Case")
# Number of strategies
n_str <- length(v_names_str)
# Markov model parameters
v_n  <- c("Healthy", "Sick", "Dead")    # state names
n_states  <- length(v_n)                # number of states
n_t  <- 60                              # number of cycles
p_HD <- 0.02                            # probability to die when healthy
p_HS <- 0.05                            # probability to become sick when healthy
p_SD <- 0.1                             # probability to die when sick
# Costs and utilities
c_H  <- 400                             # cost of remaining one cycle healthy
c_S  <- 1000                            # cost of remaining one cycle sick
c_D  <- 0                               # cost of remaining one cycle dead
u_H  <- 0.8                             # utility when healthy
u_S  <- 0.5                             # utility when sick
u_D  <- 0                               # utility when dead
d_e <- d_c <- 0.03                      # equal discount of costs and QALYs by 3%
# calculate discount weights for costs for each cycle based on discount rate d_c
v_dwc <- 1 / (1 + d_e) ^ (0:n_t)
# calculate discount weights for effectiveness for each cycle based on discount rate d_e
v_dwe <- 1 / (1 + d_c) ^ (0:n_t)
m_P_diag <- matrix(0, nrow = n_states, ncol = n_states, dimnames = list(v_n, v_n))
m_P_diag["Healthy","Sick" ]  = ""
m_P_diag["Healthy","Dead" ]  = ""
m_P_diag["Healthy","Healthy" ]  = ""
m_P_diag["Sick","Dead" ]  = ""
m_P_diag["Sick","Sick" ]  = ""
m_P_diag["Dead", "Dead" ]  = ""
layout.fig <- c(2, 1)
plotmat(t(m_P_diag), t(layout.fig), self.cex = 0.5, curve = 0, arr.pos = 0.8,
latex = T, arr.type = "curved", relsize = 0.85, box.prop=0.8,
cex = 0.8, box.cex = 0.7, lwd = 1)
# create the cohort trace
m_M <- matrix(NA,
nrow = n_t + 1 ,  # create Markov trace (n.t + 1 because R doesn't
# understand Cycle 0)
ncol = n_states,
dimnames = list(0:n_t, v_n))
m_M[1, ] <- c(1, 0, 0)          # initialize first cycle of Markov trace
# create the transition probability matrix
m_P  <- matrix(0,
nrow = n_states, ncol = n_states,
dimnames = list(v_n, v_n)) # name the columns and rows of the transition
# probability matrix
m_P
# from Healthy
m_P["Healthy", "Healthy"] <- 1 - p_HD - p_HS
m_P["Healthy", "Sick"]    <- p_HS
m_P["Healthy", "Dead"]    <- p_HD
# from Sick
m_P["Sick", "Sick"] <- 1 - p_SD
m_P["Sick", "Dead"] <- p_SD
# from Dead
m_P["Dead", "Dead"] <- 1
# check rows add up to 1
rowSums(m_P)
for (t in 1:n_t){                   # loop through the number of cycles
m_M[t + 1, ] <- m_M[t, ] %*% m_P  # estimate the state vector for the next cycle (t + 1)
}
matplot(m_M, type = 'l',
ylab = "Probability of state occupancy",
xlab = "Cycle",
main = "Cohort Trace", lwd = 3)                 # create a plot of the data
legend("right", v_n, col = c("black", "red", "green"),
lty = 1:3, bty = "n")                            # add a legend to the graph
abline(v = which.max(m_M[, "Sick"]), col = "gray")
v_os <- 1 - m_M[, "Dead"]             # calculate the overall survival (OS) probability
v_os <- rowSums(m_M[, 1:2])           # alternative way of calculating the OS probability
plot(v_os, type = 'l',
ylim = c(0, 1),
ylab = "Survival probability",
xlab = "Cycle",
main = "Overall Survival")       # create a simple plot showing the OS
# add grid
grid(nx = n_t, ny = 10, col = "lightgray", lty = "dotted", lwd = par("lwd"),
equilogs = TRUE)
v_le <- sum(v_os)           # summing probablity of OS over time  (i.e. life expectancy)
v_prev <- m_M[, "Sick"]/v_os
plot(v_prev,
ylim = c(0, 1),
ylab = "Prevalence",
xlab = "Cycle",
main = "Disease prevalence")
# per cycle
# calculate expected costs by multiplying m_M with the cost vector for the different
# health states
v_tc <- m_M %*% c(c_H, c_S, c_D)
# calculate expected QALYs by multiplying m_M with the utilities for the different
# health states
v_tu <- m_M %*% c(u_H, u_S, u_D)
# Discount costs by multiplying the cost vector with discount weights (v_dw)
v_tc_d <-  t(v_tc) %*% v_dwc
# Discount QALYS by multiplying the QALYs vector with discount weights (v_dw)
v_te_d <-  t(v_tu) %*% v_dwe
results <- data.frame( "Total Discounted Cost" = v_tc_d,
"Life Expectancy" = v_le,
"Total Discounted QALYs" = v_te_d,
check.names = F)
results
m_P_diag <- matrix(0, nrow = n_states, ncol = n_states, dimnames = list(v_n, v_n))
m_P_diag["Healthy", "Sick" ]  = ""
m_P_diag["Healthy", "Dead" ]  = ""
m_P_diag["Healthy", "Healthy" ]  = ""
m_P_diag["Sick", "Dead" ]  = ""
m_P_diag["Sick", "Sick" ]  = ""
m_P_diag["Dead", "Dead" ]  = ""
layout.fig <- c(2, 1)
plotmat(t(m_P_diag), t(layout.fig), self.cex = 0.5, curve = 0, arr.pos = 0.8,
latex = T, arr.type = "curved", relsize = 0.85, box.prop = 0.8,
cex = 0.8, box.cex = 0.7, lwd = 1)
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "scales", "ellipse", "ggplot2", "lazyeval", "igraph", "ggraph", "reshape2", "knitr")
# load (install if required) packages from GitHub
# install_github("DARTH-git/dampack", force = TRUE) Uncomment if there is a newer version
p_load_gh("DARTH-git/dampack")
source(here("functions", "Functions.R"))
set.seed(1)  # set the seed
# Model structure
n_t   <- 30                       # time horizon, 30 cycles
n_i   <- 100000                   # number of simulated individuals
v_n   <- c("H", "S1", "S2", "D")  # the model states names
n_statestates   <- length(v_n)              # the number of health states
d_r   <- 0.03                     # discount rate of 3% per cycle
v_dwe <- v_dwc <- 1 / ((1 + d_r) ^ (0:n_t))    # discount weight
v_names_str <- c("no treatment", "treatment")  # strategy names
n_str <- length(v_names_str)      # number of strategies
### Event probabilities (per cycle)
# Annual transition probabilities
p_HS1   <- 0.15                   # probability of becoming sick when healthy
p_S1H   <- 0.5                    # probability of recovering to healthy when sick
p_S1S2  <- 0.105                  # probability of becoming sicker when sick
# Annual probabilities of death
# load age dependent probability
p_mort   <- read.csv(here("data", "mortProb_age.csv"))
# load age distribution
dist_Age <- read.csv(here("data", "MyPopulation-AgeDistribution.csv"))
p_S1D    <- 0.0149          # probability to die in S1 by cycle
p_S2D    <- 0.048           # probability to die in S2
# Cost inputs
c_H     <- 2000             # cost of one cycle in the healthy state
c_S1    <- 4000             # cost of one cycle in the sick state
c_S2    <- 15000            # cost of one cycle in the sicker state
c_D     <- 0                # cost of one cycle in the dead state
c_Trt   <- 12000            # cost of treatment (per cycle)
# Utility inputs
u_H     <- 1                # utility when healthy
u_S1    <- 0.75             # utility when sick
u_S2    <- 0.5              # utility when sicker
u_D     <- 0                # utility when dead
u_Trt   <- 0.95             # utility when sick(er) and being treated
v_x     <- runif(n_i, min = 0.95, max = 1.05) # treatment effect modifier at baseline
# sample from age distribution an initial age for every individual
v_age0  <- sample(x = dist_Age$age, prob = dist_Age$prop, size = n_i, replace = TRUE)
df_X    <- data.frame(ID = 1:n_i, x = v_x, Age = v_age0)
# Specify the initial health state of the individuals
# everyone begins in the healthy state (in this example)
v_M_init  <- rep("H", n_i)   # a vector with the initial health state for all individuals
Probs <- function(M_t, df_X, t) {
# Arguments:
# M_t: health state occupied by individual i at cycle t (character variable)
# df_X:     data frame with individual characteristics data
# t:     current cycle
# Returns:
#   transition probabilities for that cycle
# create matrix of state transition probabilities
m_p_t           <- matrix(0, nrow = n_states, ncol = n_i)
rownames(m_p_t) <-  v_n  # give the state names to the rows
# lookup baseline probability and rate of dying based on individual characteristics
p_HD_all <- inner_join(df_X, p_mort, by = c("Age"))
p_HD     <- p_HD_all[M_t == "H","p_HD"]
# update the m_p with the appropriate probabilities
# transition probabilities when healthy
m_p_t[, M_t == "H"]  <- rbind(1 - p_HS1 - p_HD, p_HS1, 0, p_HD)
# transition probabilities when sick
m_p_t[, M_t == "S1"] <- rbind(p_S1H, 1 - p_S1H - p_S1S2 - p_S1D, p_S1S2, p_S1D)
# transition probabilities when sicker
m_p_t[, M_t == "S2"] <- rbind(0, 0, 1 - p_S2D, p_S2D)
# transition probabilities when dead
m_p_t[, M_t == "D"]  <- rbind(0, 0, 0, 1)
return(t(m_p_t))
}
Costs <- function (M_t, Trt = FALSE) {
# M_t: health state occupied by individual i at cycle t (character variable)
# Trt:  is the individual being treated? (default is FALSE)
c_t <- 0                                 # by default the cost for everyone is zero
c_t[M_t == "H"]  <- c_H                  # update the cost if healthy
c_t[M_t == "S1"] <- c_S1 + c_Trt * Trt   # update the cost if sick conditional on treatment
c_t[M_t == "S2"] <- c_S2 + c_Trt * Trt   # update the cost if sicker conditional on treatment
c_t[M_t == "D"]  <- c_D                  # update the cost if dead
return(c_t)        		                   # return the costs
}
Effs <- function (M_t, df_X, Trt = FALSE, cl = 1) {
# M_t: health state occupied by individual i at cycle t (character variable)
# df_X: data frame with individual characteristics data
# Trt:  is the individual treated? (default is FALSE)
# cl:   cycle length (default is 1)
u_t <- 0                                 # by default the utility for everyone is zero
u_t[M_t == "H"]  <- u_H                  # update the utility if healthy
u_t[M_t == "S1" & Trt == FALSE] <- u_S1  # update the utility if sick
# update the utility if sick but on treatment (adjust for individual effect modifier)
u_t[M_t == "S1" & Trt == TRUE]  <- u_Trt * df_X$x[M_t == "S1"]
u_t[M_t == "S2"] <- u_S2                 # update the utility if sicker
u_t[M_t == "D"]  <- u_D                  # update the utility if dead
QALYs <-  u_t * cl  # calculate the QALYs during cycle t
return(QALYs)       # return the QALYs
}
MicroSim <- function(n_i, df_X , Trt = FALSE, seed = 1) {
# Arguments:
# n_i:     number of individuals
# df_X     data frame with individual characteristics data
# Trt:     is this the individual receiving treatment? (default is FALSE)
# seed:    default is 1
set.seed(seed) # set the seed
# create three matrices called m_M, m_C and m_E
# number of rows is equal to the n_i, the number of columns is equal to n_t
# (the initial state and all the n_t cycles)
# m_M is used to store the health state information over time for every individual
# m_C is used to store the costs information over time for every individual
# m_E is used to store the effects information over time for every individual
m_M <- m_C <- m_E <- m_Ts <-  matrix(nrow = n_i, ncol = n_t + 1,
dimnames = list(paste("ind"  , 1:n_i, sep = " "),
paste("cycle", 0:n_t, sep = " ")))
# initial health state at cycle 0 for individual i
m_M [, 1] <- v_M_init
# calculate costs per individual during cycle 0
m_C[, 1]  <- Costs(m_M[, 1], Trt)
# calculate QALYs per individual during cycle 0
m_E[, 1]  <- Effs (m_M[, 1], df_X, Trt)
# open a loop for time running cycles 1 to n_t
for (t in 1:n_t) {
# calculate the transition probabilities for the cycle based on  health state t
m_P <- Probs(m_M[, t], df_X, t)
# sample the current health state and store that state in matrix m_M
m_M[, t + 1]  <- samplev(m_P, 1)
# calculate costs per individual during cycle t + 1
m_C[, t + 1]  <- Costs(m_M[, t + 1], Trt)
# calculate QALYs per individual during cycle t + 1
m_E[, t + 1]  <- Effs(m_M[, t + 1], df_X, Trt)
# update the age of individuals that are alive
df_X$Age[m_M[, t + 1] != "D"]  <- df_X$Age[m_M[, t + 1] != "D"] + 1
# Display simulation progress
if(t/(n_t/10) == round(t/(n_t/10), 0)) { # display progress every 10%
cat('\r', paste(t/n_t * 100, "% done", sep = " "))
}
} # close the loop for the time points
# calculate
tc <- m_C %*% v_dwc    # total (discounted) cost per individual
te <- m_E %*% v_dwe    # total (discounted) QALYs per individual
tc_hat <- mean(tc)     # average (discounted) cost
te_hat <- mean(te)     # average (discounted) QALYs
# store the results from the simulation in a list
results <- list(m_M = m_M, m_C = m_C, m_E = m_E, tc = tc , te = te, tc_hat = tc_hat,
te_hat = te_hat)
return(results)  # return the results
} # end of the MicroSim function
# By specifying all the arguments in the `MicroSim()` the simulation can be started
# In this example the outcomes are of the simulation are stored in the variables `outcomes_no_tr` and `outcomes_trt`.
# Run the simulation for both no treatment and treatment options
outcomes_no_trt  <- MicroSim(n_i, df_X, Trt = FALSE, seed = 1)
