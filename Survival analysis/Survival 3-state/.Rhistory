risk.table = TRUE,         # Add risk table
risk.table.height = 0.25,  # Useful to change when you have multiple groups
ggtheme = theme_bw(),      # Change ggplot2 theme
xlab = 'Time in days',     # Change X-axis label
title    = "Survival curve for Progression-Free Survival (PFS)",
subtitle = "Based on Kaplan-Meier estimates"
)
# Flexsurv allows parametric fitting of curves
fit_weib <- flexsurvreg(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,  dist = "weibull")
plot(fit_weib)
# fit all parametric models to the data and extract the AIC/BIC.
# Select the one with the most appropriate fit
# Repeat for PFS and OS
fit_PFS  <- fit.fun(time  = "PFS_time", status = "PFS_status", data = OS_PFS_data,
times = times, extrapolate = T)
fit_OS   <- fit.fun(time  = "OS_time", status  = "OS_status" , data = OS_PFS_data,
times = times, extrapolate = T)
best_PFS <- fit_PFS[["Weibull"]]
best_OS  <- fit_OS [["Weibull"]]
# construct a partitioned survival model out of the fitted models
m_M_PSM <- partsurv(best_PFS, best_OS, time = times)$trace
# The existing functions in R require the data in a long rather than a wide format
# convert the data in a way that flexsurv understands using the mstate package
data_long       <- msprep(time = sim_data, status = status, trans = tmat )
data_long$trans <- as.factor(data_long$trans) # convert trans to a factor
data_long$from  <- case_when(data_long$from == 1 ~ "healthy",
data_long$from == 2 ~ "sick",
data_long$from == 3 ~ "dead")
data_long$to    <- case_when(data_long$to == 1 ~ "healthy",
data_long$to == 2 ~ "sick",
data_long$to == 3 ~ "dead")
# fit all parametric multistate models simultaneously to the data and extract the AIC/BIC
# Select the one with the lowest AIC
fits <- fit.mstate(time ="time", status = "status", trans, data = data_long,
times = times, extrapolate = T )
best.fit <- fits[["Loglogistic"]]
source(here("functions", "survival_functions_backend.R"))
# Construct a DES model out of the simultaneously fitted multistate model
DES_data <- sim.fmsm(best.fit, start = 1, t = n_years, trans = tmat, M = n_i)
n-i
n_i
options(scipen=999)
n_i
system.time(trace.DES(DES_data, n_i  = n_i , times = times, tmat = tmat))
system.time(trace.DES1(DES_data, n_i  = n_i , times = times, tmat = tmat))
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "gems", "flexsurv", "survminer", "survHE", "ggplot2", "msm", "igraph", "mstate",   "reshape2", "knitr", "diagram")
source(here("functions", "survival_functions.R"))
v_n       <- c("healthy", "sick", "dead")  # state names
n_s       <- length(v_n)                   # No of states
n_i       <- 10000                          # number of simulations
c_l       <- 1 / 12                        # cycle length (a month)
n_t       <- 30                            # number of years (20 years)
times     <- seq(0, n_t, c_l)              # the cycles in years
set.seed(2020)                             # set the seed
tmat <- matrix(NA, n_s, n_s, dimnames = list(v_n,v_n))
tmat["healthy", "sick"]  <- 1
tmat["healthy", "dead"]  <- 2
tmat["sick"   , "dead"]  <- 3
layout.fig <- c(2,1)
plotmat(t(tmat), t(layout.fig), self.cex = 0.5, curve = 0, arr.pos = 0.76,
latex = T, arr.type = "curved", relsize = 0.85, box.prop=0.8,
cex = 0.1, box.cex = 0.7, lwd = 1)
source(here("data", "data.R"))
head(true_data)
head(sim_data)
head(status)
head(OS_PFS_data)
fit_KM   <- survfit(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,
type ="fleming-harrington")
plot(fit_KM, mark.time = T)
# a prettier way of plotting!!
ggsurvplot(
fit_KM,
data = OS_PFS_data,
size = 1,                  # change line size
palette = c("orange2"),    # custom color palettes
conf.int = TRUE,           # Add confidence interval
pval = TRUE,               # Add p-value
risk.table = TRUE,         # Add risk table
risk.table.height = 0.25,  # Useful to change when you have multiple groups
ggtheme = theme_bw(),      # Change ggplot2 theme
xlab = 'Time in days',     # Change X-axis label
title    = "Survival curve for Progression-Free Survival (PFS)",
subtitle = "Based on Kaplan-Meier estimates"
)
# Flexsurv allows parametric fitting of curves
fit_weib <- flexsurvreg(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,  dist = "weibull")
plot(fit_weib)
# fit all parametric models to the data and extract the AIC/BIC.
# Select the one with the most appropriate fit
# Repeat for PFS and OS
fit_PFS  <- fit.fun(time  = "PFS_time", status = "PFS_status", data = OS_PFS_data,
times = times, extrapolate = T)
fit_OS   <- fit.fun(time  = "OS_time", status  = "OS_status" , data = OS_PFS_data,
times = times, extrapolate = T)
best_PFS <- fit_PFS[["Weibull"]]
best_OS  <- fit_OS [["Weibull"]]
# construct a partitioned survival model out of the fitted models
m_M_PSM <- partsurv(best_PFS, best_OS, time = times)$trace
# The existing functions in R require the data in a long rather than a wide format
# convert the data in a way that flexsurv understands using the mstate package
data_long       <- msprep(time = sim_data, status = status, trans = tmat )
data_long$trans <- as.factor(data_long$trans) # convert trans to a factor
data_long$from  <- case_when(data_long$from == 1 ~ "healthy",
data_long$from == 2 ~ "sick",
data_long$from == 3 ~ "dead")
data_long$to    <- case_when(data_long$to == 1 ~ "healthy",
data_long$to == 2 ~ "sick",
data_long$to == 3 ~ "dead")
# fit all parametric multistate models simultaneously to the data and extract the AIC/BIC
# Select the one with the lowest AIC
fits <- fit.mstate(time ="time", status = "status", trans, data = data_long,
times = times, extrapolate = T )
best.fit <- fits[["Loglogistic"]]
source(here("functions", "survival_functions_backend.R"))
# Construct a DES model out of the simultaneously fitted multistate model
DES_data <- sim.fmsm(best.fit, start = 1, t = n_years, trans = tmat, M = n_i)
system.time(trace.DES(DES_data, n_i  = n_i , times = times, tmat = tmat))
system.time(trace.DES1(DES_data, n_i  = n_i , times = times, tmat = tmat))
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "gems", "flexsurv", "survminer", "survHE", "ggplot2", "msm", "igraph", "mstate",   "reshape2", "knitr", "diagram")
source(here("functions", "survival_functions.R"))
v_n       <- c("healthy", "sick", "dead")  # state names
n_s       <- length(v_n)                   # No of states
n_i       <- 150000                          # number of simulations
c_l       <- 1 / 12                        # cycle length (a month)
n_t       <- 30                            # number of years (20 years)
times     <- seq(0, n_t, c_l)              # the cycles in years
set.seed(2020)                             # set the seed
tmat <- matrix(NA, n_s, n_s, dimnames = list(v_n,v_n))
tmat["healthy", "sick"]  <- 1
tmat["healthy", "dead"]  <- 2
tmat["sick"   , "dead"]  <- 3
layout.fig <- c(2,1)
plotmat(t(tmat), t(layout.fig), self.cex = 0.5, curve = 0, arr.pos = 0.76,
latex = T, arr.type = "curved", relsize = 0.85, box.prop=0.8,
cex = 0.1, box.cex = 0.7, lwd = 1)
source(here("data", "data.R"))
head(true_data)
head(sim_data)
head(status)
head(OS_PFS_data)
fit_KM   <- survfit(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,
type ="fleming-harrington")
plot(fit_KM, mark.time = T)
# a prettier way of plotting!!
ggsurvplot(
fit_KM,
data = OS_PFS_data,
size = 1,                  # change line size
palette = c("orange2"),    # custom color palettes
conf.int = TRUE,           # Add confidence interval
pval = TRUE,               # Add p-value
risk.table = TRUE,         # Add risk table
risk.table.height = 0.25,  # Useful to change when you have multiple groups
ggtheme = theme_bw(),      # Change ggplot2 theme
xlab = 'Time in days',     # Change X-axis label
title    = "Survival curve for Progression-Free Survival (PFS)",
subtitle = "Based on Kaplan-Meier estimates"
)
# Flexsurv allows parametric fitting of curves
fit_weib <- flexsurvreg(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,  dist = "weibull")
plot(fit_weib)
# fit all parametric models to the data and extract the AIC/BIC.
# Select the one with the most appropriate fit
# Repeat for PFS and OS
fit_PFS  <- fit.fun(time  = "PFS_time", status = "PFS_status", data = OS_PFS_data,
times = times, extrapolate = T)
fit_OS   <- fit.fun(time  = "OS_time", status  = "OS_status" , data = OS_PFS_data,
times = times, extrapolate = T)
best_PFS <- fit_PFS[["Weibull"]]
best_OS  <- fit_OS [["Weibull"]]
# construct a partitioned survival model out of the fitted models
m_M_PSM <- partsurv(best_PFS, best_OS, time = times)$trace
# The existing functions in R require the data in a long rather than a wide format
# convert the data in a way that flexsurv understands using the mstate package
data_long       <- msprep(time = sim_data, status = status, trans = tmat )
data_long$trans <- as.factor(data_long$trans) # convert trans to a factor
data_long$from  <- case_when(data_long$from == 1 ~ "healthy",
data_long$from == 2 ~ "sick",
data_long$from == 3 ~ "dead")
data_long$to    <- case_when(data_long$to == 1 ~ "healthy",
data_long$to == 2 ~ "sick",
data_long$to == 3 ~ "dead")
# fit all parametric multistate models simultaneously to the data and extract the AIC/BIC
# Select the one with the lowest AIC
fits <- fit.mstate(time ="time", status = "status", trans, data = data_long,
times = times, extrapolate = T )
best.fit <- fits[["Loglogistic"]]
source(here("functions", "survival_functions_backend.R"))
# Construct a DES model out of the simultaneously fitted multistate model
DES_data <- sim.fmsm(best.fit, start = 1, t = n_years, trans = tmat, M = n_i)
system.time(trace.DES(DES_data, n_i  = n_i , times = times, tmat = tmat))
system.time(trace.DES1(DES_data, n_i  = n_i , times = times, tmat = tmat))
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "gems", "flexsurv", "survminer", "survHE", "ggplot2", "msm", "igraph", "mstate",   "reshape2", "knitr", "diagram")
source(here("functions", "survival_functions.R"))
v_n       <- c("healthy", "sick", "dead")  # state names
n_s       <- length(v_n)                   # No of states
n_i       <- 200000                          # number of simulations
c_l       <- 1 / 12                        # cycle length (a month)
n_t       <- 30                            # number of years (20 years)
times     <- seq(0, n_t, c_l)              # the cycles in years
set.seed(2020)                             # set the seed
tmat <- matrix(NA, n_s, n_s, dimnames = list(v_n,v_n))
tmat["healthy", "sick"]  <- 1
tmat["healthy", "dead"]  <- 2
tmat["sick"   , "dead"]  <- 3
layout.fig <- c(2,1)
plotmat(t(tmat), t(layout.fig), self.cex = 0.5, curve = 0, arr.pos = 0.76,
latex = T, arr.type = "curved", relsize = 0.85, box.prop=0.8,
cex = 0.1, box.cex = 0.7, lwd = 1)
source(here("data", "data.R"))
head(true_data)
head(sim_data)
head(status)
head(OS_PFS_data)
fit_KM   <- survfit(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,
type ="fleming-harrington")
plot(fit_KM, mark.time = T)
# a prettier way of plotting!!
ggsurvplot(
fit_KM,
data = OS_PFS_data,
size = 1,                  # change line size
palette = c("orange2"),    # custom color palettes
conf.int = TRUE,           # Add confidence interval
pval = TRUE,               # Add p-value
risk.table = TRUE,         # Add risk table
risk.table.height = 0.25,  # Useful to change when you have multiple groups
ggtheme = theme_bw(),      # Change ggplot2 theme
xlab = 'Time in days',     # Change X-axis label
title    = "Survival curve for Progression-Free Survival (PFS)",
subtitle = "Based on Kaplan-Meier estimates"
)
# Flexsurv allows parametric fitting of curves
fit_weib <- flexsurvreg(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,  dist = "weibull")
plot(fit_weib)
# fit all parametric models to the data and extract the AIC/BIC.
# Select the one with the most appropriate fit
# Repeat for PFS and OS
fit_PFS  <- fit.fun(time  = "PFS_time", status = "PFS_status", data = OS_PFS_data,
times = times, extrapolate = T)
fit_OS   <- fit.fun(time  = "OS_time", status  = "OS_status" , data = OS_PFS_data,
times = times, extrapolate = T)
best_PFS <- fit_PFS[["Weibull"]]
best_OS  <- fit_OS [["Weibull"]]
# construct a partitioned survival model out of the fitted models
m_M_PSM <- partsurv(best_PFS, best_OS, time = times)$trace
# The existing functions in R require the data in a long rather than a wide format
# convert the data in a way that flexsurv understands using the mstate package
data_long       <- msprep(time = sim_data, status = status, trans = tmat )
data_long$trans <- as.factor(data_long$trans) # convert trans to a factor
data_long$from  <- case_when(data_long$from == 1 ~ "healthy",
data_long$from == 2 ~ "sick",
data_long$from == 3 ~ "dead")
data_long$to    <- case_when(data_long$to == 1 ~ "healthy",
data_long$to == 2 ~ "sick",
data_long$to == 3 ~ "dead")
# fit all parametric multistate models simultaneously to the data and extract the AIC/BIC
# Select the one with the lowest AIC
fits <- fit.mstate(time ="time", status = "status", trans, data = data_long,
times = times, extrapolate = T )
best.fit <- fits[["Loglogistic"]]
source(here("functions", "survival_functions_backend.R"))
# Construct a DES model out of the simultaneously fitted multistate model
DES_data <- sim.fmsm(best.fit, start = 1, t = n_years, trans = tmat, M = n_i)
n_i
system.time(trace.DES(DES_data, n_i  = n_i , times = times, tmat = tmat))
system.time(trace.DES1(DES_data, n_i  = n_i , times = times, tmat = tmat))
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "gems", "flexsurv", "survminer", "survHE", "ggplot2", "msm", "igraph", "mstate",   "reshape2", "knitr", "diagram")
source(here("functions", "survival_functions.R"))
v_n       <- c("healthy", "sick", "dead")  # state names
n_s       <- length(v_n)                   # No of states
n_i       <- 300000                          # number of simulations
c_l       <- 1 / 12                        # cycle length (a month)
n_t       <- 30                            # number of years (20 years)
times     <- seq(0, n_t, c_l)              # the cycles in years
set.seed(2020)                             # set the seed
tmat <- matrix(NA, n_s, n_s, dimnames = list(v_n,v_n))
tmat["healthy", "sick"]  <- 1
tmat["healthy", "dead"]  <- 2
tmat["sick"   , "dead"]  <- 3
layout.fig <- c(2,1)
plotmat(t(tmat), t(layout.fig), self.cex = 0.5, curve = 0, arr.pos = 0.76,
latex = T, arr.type = "curved", relsize = 0.85, box.prop=0.8,
cex = 0.1, box.cex = 0.7, lwd = 1)
source(here("data", "data.R"))
head(true_data)
head(sim_data)
head(status)
head(OS_PFS_data)
fit_KM   <- survfit(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,
type ="fleming-harrington")
plot(fit_KM, mark.time = T)
# a prettier way of plotting!!
ggsurvplot(
fit_KM,
data = OS_PFS_data,
size = 1,                  # change line size
palette = c("orange2"),    # custom color palettes
conf.int = TRUE,           # Add confidence interval
pval = TRUE,               # Add p-value
risk.table = TRUE,         # Add risk table
risk.table.height = 0.25,  # Useful to change when you have multiple groups
ggtheme = theme_bw(),      # Change ggplot2 theme
xlab = 'Time in days',     # Change X-axis label
title    = "Survival curve for Progression-Free Survival (PFS)",
subtitle = "Based on Kaplan-Meier estimates"
)
# Flexsurv allows parametric fitting of curves
fit_weib <- flexsurvreg(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,  dist = "weibull")
plot(fit_weib)
# fit all parametric models to the data and extract the AIC/BIC.
# Select the one with the most appropriate fit
# Repeat for PFS and OS
fit_PFS  <- fit.fun(time  = "PFS_time", status = "PFS_status", data = OS_PFS_data,
times = times, extrapolate = T)
fit_OS   <- fit.fun(time  = "OS_time", status  = "OS_status" , data = OS_PFS_data,
times = times, extrapolate = T)
best_PFS <- fit_PFS[["Weibull"]]
best_OS  <- fit_OS [["Weibull"]]
# construct a partitioned survival model out of the fitted models
m_M_PSM <- partsurv(best_PFS, best_OS, time = times)$trace
# The existing functions in R require the data in a long rather than a wide format
# convert the data in a way that flexsurv understands using the mstate package
data_long       <- msprep(time = sim_data, status = status, trans = tmat )
data_long$trans <- as.factor(data_long$trans) # convert trans to a factor
data_long$from  <- case_when(data_long$from == 1 ~ "healthy",
data_long$from == 2 ~ "sick",
data_long$from == 3 ~ "dead")
data_long$to    <- case_when(data_long$to == 1 ~ "healthy",
data_long$to == 2 ~ "sick",
data_long$to == 3 ~ "dead")
# fit all parametric multistate models simultaneously to the data and extract the AIC/BIC
# Select the one with the lowest AIC
fits <- fit.mstate(time ="time", status = "status", trans, data = data_long,
times = times, extrapolate = T )
best.fit <- fits[["Loglogistic"]]
source(here("functions", "survival_functions_backend.R"))
# Construct a DES model out of the simultaneously fitted multistate model
DES_data <- sim.fmsm(best.fit, start = 1, t = n_years, trans = tmat, M = n_i)
m_M_DES  <- trace.DES(DES_data, n_i  = n_i , times = times, tmat = tmat)
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "gems", "flexsurv", "survminer", "survHE", "ggplot2", "msm", "igraph", "mstate",   "reshape2", "knitr", "diagram")
source(here("functions", "survival_functions.R"))
v_n       <- c("healthy", "sick", "dead")  # state names
n_s       <- length(v_n)                   # No of states
n_i       <- 300000                          # number of simulations
c_l       <- 1 / 12                        # cycle length (a month)
n_t       <- 30                            # number of years (20 years)
times     <- seq(0, n_t, c_l)              # the cycles in years
set.seed(2020)                             # set the seed
tmat <- matrix(NA, n_s, n_s, dimnames = list(v_n,v_n))
tmat["healthy", "sick"]  <- 1
tmat["healthy", "dead"]  <- 2
tmat["sick"   , "dead"]  <- 3
layout.fig <- c(2,1)
plotmat(t(tmat), t(layout.fig), self.cex = 0.5, curve = 0, arr.pos = 0.76,
latex = T, arr.type = "curved", relsize = 0.85, box.prop=0.8,
cex = 0.1, box.cex = 0.7, lwd = 1)
source(here("data", "data.R"))
head(true_data)
head(sim_data)
head(status)
head(OS_PFS_data)
fit_KM   <- survfit(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,
type ="fleming-harrington")
plot(fit_KM, mark.time = T)
# a prettier way of plotting!!
ggsurvplot(
fit_KM,
data = OS_PFS_data,
size = 1,                  # change line size
palette = c("orange2"),    # custom color palettes
conf.int = TRUE,           # Add confidence interval
pval = TRUE,               # Add p-value
risk.table = TRUE,         # Add risk table
risk.table.height = 0.25,  # Useful to change when you have multiple groups
ggtheme = theme_bw(),      # Change ggplot2 theme
xlab = 'Time in days',     # Change X-axis label
title    = "Survival curve for Progression-Free Survival (PFS)",
subtitle = "Based on Kaplan-Meier estimates"
)
# Flexsurv allows parametric fitting of curves
fit_weib <- flexsurvreg(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,  dist = "weibull")
plot(fit_weib)
# fit all parametric models to the data and extract the AIC/BIC.
# Select the one with the most appropriate fit
# Repeat for PFS and OS
fit_PFS  <- fit.fun(time  = "PFS_time", status = "PFS_status", data = OS_PFS_data,
times = times, extrapolate = T)
fit_OS   <- fit.fun(time  = "OS_time", status  = "OS_status" , data = OS_PFS_data,
times = times, extrapolate = T)
best_PFS <- fit_PFS[["Weibull"]]
best_OS  <- fit_OS [["Weibull"]]
# construct a partitioned survival model out of the fitted models
m_M_PSM <- partsurv(best_PFS, best_OS, time = times)$trace
# The existing functions in R require the data in a long rather than a wide format
# convert the data in a way that flexsurv understands using the mstate package
data_long       <- msprep(time = sim_data, status = status, trans = tmat )
data_long$trans <- as.factor(data_long$trans) # convert trans to a factor
data_long$from  <- case_when(data_long$from == 1 ~ "healthy",
data_long$from == 2 ~ "sick",
data_long$from == 3 ~ "dead")
data_long$to    <- case_when(data_long$to == 1 ~ "healthy",
data_long$to == 2 ~ "sick",
data_long$to == 3 ~ "dead")
# fit all parametric multistate models simultaneously to the data and extract the AIC/BIC
# Select the one with the lowest AIC
fits <- fit.mstate(time ="time", status = "status", trans, data = data_long,
times = times, extrapolate = T )
best.fit <- fits[["Loglogistic"]]
source(here("functions", "survival_functions_backend.R"))
# Construct a DES model out of the simultaneously fitted multistate model
DES_data <- sim.fmsm(best.fit, start = 1, t = n_years, trans = tmat, M = n_i)
system.time(trace.DES(DES_data, n_i  = n_i , times = times, tmat = tmat))
system.time(trace.DES1(DES_data, n_i  = n_i , times = times, tmat = tmat))
n_i
rm(list = ls())      # clear memory (removes all the variables from the workspace)
if (!require('pacman')) install.packages('pacman'); library(pacman) # use this package to conveniently install other packages
# load (install if required) packages from CRAN
p_load("here", "dplyr", "devtools", "gems", "flexsurv", "survminer", "survHE", "ggplot2", "msm", "igraph", "mstate",   "reshape2", "knitr", "diagram")
source(here("functions", "survival_functions.R"))
v_n       <- c("healthy", "sick", "dead")  # state names
n_s       <- length(v_n)                   # No of states
n_i       <- 500000                          # number of simulations
c_l       <- 1 / 12                        # cycle length (a month)
n_t       <- 30                            # number of years (20 years)
times     <- seq(0, n_t, c_l)              # the cycles in years
set.seed(2020)                             # set the seed
tmat <- matrix(NA, n_s, n_s, dimnames = list(v_n,v_n))
tmat["healthy", "sick"]  <- 1
tmat["healthy", "dead"]  <- 2
tmat["sick"   , "dead"]  <- 3
layout.fig <- c(2,1)
plotmat(t(tmat), t(layout.fig), self.cex = 0.5, curve = 0, arr.pos = 0.76,
latex = T, arr.type = "curved", relsize = 0.85, box.prop=0.8,
cex = 0.1, box.cex = 0.7, lwd = 1)
source(here("data", "data.R"))
head(true_data)
head(sim_data)
head(status)
head(OS_PFS_data)
fit_KM   <- survfit(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,
type ="fleming-harrington")
plot(fit_KM, mark.time = T)
# a prettier way of plotting!!
ggsurvplot(
fit_KM,
data = OS_PFS_data,
size = 1,                  # change line size
palette = c("orange2"),    # custom color palettes
conf.int = TRUE,           # Add confidence interval
pval = TRUE,               # Add p-value
risk.table = TRUE,         # Add risk table
risk.table.height = 0.25,  # Useful to change when you have multiple groups
ggtheme = theme_bw(),      # Change ggplot2 theme
xlab = 'Time in days',     # Change X-axis label
title    = "Survival curve for Progression-Free Survival (PFS)",
subtitle = "Based on Kaplan-Meier estimates"
)
# Flexsurv allows parametric fitting of curves
fit_weib <- flexsurvreg(Surv(time = OS_time, event = OS_status) ~ 1, data = OS_PFS_data,  dist = "weibull")
plot(fit_weib)
# fit all parametric models to the data and extract the AIC/BIC.
# Select the one with the most appropriate fit
# Repeat for PFS and OS
fit_PFS  <- fit.fun(time  = "PFS_time", status = "PFS_status", data = OS_PFS_data,
times = times, extrapolate = T)
fit_OS   <- fit.fun(time  = "OS_time", status  = "OS_status" , data = OS_PFS_data,
times = times, extrapolate = T)
best_PFS <- fit_PFS[["Weibull"]]
best_OS  <- fit_OS [["Weibull"]]
# construct a partitioned survival model out of the fitted models
m_M_PSM <- partsurv(best_PFS, best_OS, time = times)$trace
# The existing functions in R require the data in a long rather than a wide format
# convert the data in a way that flexsurv understands using the mstate package
data_long       <- msprep(time = sim_data, status = status, trans = tmat )
data_long$trans <- as.factor(data_long$trans) # convert trans to a factor
data_long$from  <- case_when(data_long$from == 1 ~ "healthy",
data_long$from == 2 ~ "sick",
data_long$from == 3 ~ "dead")
data_long$to    <- case_when(data_long$to == 1 ~ "healthy",
data_long$to == 2 ~ "sick",
data_long$to == 3 ~ "dead")
# fit all parametric multistate models simultaneously to the data and extract the AIC/BIC
# Select the one with the lowest AIC
fits <- fit.mstate(time ="time", status = "status", trans, data = data_long,
times = times, extrapolate = T )
best.fit <- fits[["Loglogistic"]]
source(here("functions", "survival_functions_backend.R"))
# Construct a DES model out of the simultaneously fitted multistate model
DES_data <- sim.fmsm(best.fit, start = 1, t = n_years, trans = tmat, M = n_i)
n_i
options(scipen=999)
n_i
system.time(trace.DES(DES_data, n_i  = n_i , times = times, tmat = tmat))
system.time(trace.DES1(DES_data, n_i  = n_i , times = times, tmat = tmat))
n_i
