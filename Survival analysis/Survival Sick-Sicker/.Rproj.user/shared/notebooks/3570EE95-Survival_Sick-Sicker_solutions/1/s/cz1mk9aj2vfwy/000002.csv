"0","MicroSim <- function(n_i, df_X , Trt = FALSE, seed = 1) {"
"0","  # Arguments:  "
"0","    # n_i:     number of individuals"
"0","    # df_X     data frame with individual data "
"0","    # Trt:     is this the individual receiving treatment? (default is FALSE)"
"0","    # seed:    default is 1"
"0","  "
"0","  set.seed(seed)     # set the seed"
"0","  "
"0","  n_s <- length(v_n) # the number of health states"
"0","  "
"0","  # create three matrices called m_M, m_C and m_E"
"0","  # number of rows is equal to the n_i, the number of columns is equal to n_t  "
"0","  # (the initial state and all the n_t cycles)"
"0","  # m_M is used to store the health state information over time for every individual"
"0","  # m_C is used to store the costs information over time for every individual"
"0","  # m_E is used to store the effects information over time for every individual"
"0","  "
"0","  m_M <- m_C <- m_E <- m_Ts <-  matrix(nrow = n_i, ncol = n_t + 1, "
"0","                                       dimnames = list(paste(""ind""  , 1:n_i, sep = "" ""), "
"0","                                                       paste(""cycle"", 0:n_t, sep = "" "")))  "
"0","  "
"0","  m_M [, 1] <- v_M_init      # initial health state at cycle 0 for individual i"
"0","  v_Ts1      <- v_Ts1_init   # initialize time since illnes onset for individual i"
"0","  v_Ts2      <- v_Ts2_init   # initialize time since illnes onset for individual i"
"0","  "
"0","  m_C[, 1]  <- Costs(m_M[, 1], Trt)         # calculate costs per individual during cycle 0"
"0","  m_E[, 1]  <- Effs (m_M[, 1], df_X, Trt)   # calculate QALYs per individual during cycle 0"
"0","  "
"0","  # open a loop for time running cycles 1 to n_t "
"0","  for (t in 1:n_t) {"
"0","    # calculate the transition probabilities for the cycle based on  health state t"
"0","    m_p <- Probs(m_M[, t], df_X, v_Ts1,v_Ts2, t)      "
"0","    # sample the current health state and store that state in matrix m_M "
"0","    m_M[, t + 1]  <- samplev(m_p, 1)                  "
"0","    # calculate costs per individual during cycle t + 1"
"0","    m_C[, t + 1]  <- Costs(m_M[, t + 1], Trt)         "
"0","    # calculate QALYs per individual during cycle t + 1"
"0","    m_E[, t + 1]  <- Effs(m_M[, t + 1], df_X, Trt)    "
"0","    "
"0","    v_Ts1 <- if_else(m_M[, t + 1] == ""S1"", v_Ts1 + 1, 0)"
"0","    v_Ts2 <- if_else(m_M[, t + 1] == ""S2"", v_Ts2 + 1, 0) "
"0","    df_X$Age[m_M[, t + 1] != ""D""]  <- df_X$Age[m_M[, t + 1] != ""D""] + 1"
"0","    "
"0","    # Display simulation progress"
"0","    if(t/(n_t/10) == round(t/(n_t/10), 0)) { # display progress every 10%"
"0","      cat('\r', paste(t/n_t * 100, ""% done"", sep = "" ""))"
"0","    }"
"0","    "
"0","  } # close the loop for the time points "
"0","  "
"0","  # calculate  "
"0","  tc <- m_C %*% v_dw     # total (discounted) cost per individual"
"0","  te <- m_E %*% v_dw     # total (discounted) QALYs per individual "
"0","  tc_hat <- mean(tc)     # average (discounted) cost "
"0","  te_hat <- mean(te)     # average (discounted) QALYs"
"0","  "
"0","  # store the results from the simulation in a list"
"0","  results <- list(m_M = m_M, m_C = m_C, m_E = m_E, tc = tc , te = te, tc_hat = tc_hat, te_hat = te_hat)   "
"0","  "
"0","  return(results)  # return the results"
"0",""
"0","} # end of the MicroSim function  "
"0",""
"0","# By specifying all the arguments in the `MicroSim()` the simulation can be started"
"0","# In this example the outcomes are of the simulation are stored in the variables `outcomes_no_tr` and `outcomes_trt`."
"0",""
"0","# Run the simulation for both no treatment and treatment options"
"0","outcomes_no_trt  <- MicroSim(n_i, df_X, Trt = FALSE, seed = 1)"
"1",""
"1"," "
"1","10 % done"
"1",""
"1"," "
"1","20 % done"
"1",""
"1"," "
"1","30 % done"
"1",""
"1"," "
"1","40 % done"
"1",""
"1"," "
"1","50 % done"
"1",""
"1"," "
"1","60 % done"
"1",""
"1"," "
"1","70 % done"
"1",""
"1"," "
"1","80 % done"
"1",""
"1"," "
"1","90 % done"
"1",""
"1"," "
"1","100 % done"
"0","outcomes_trt     <- MicroSim(n_i, df_X, Trt = TRUE, seed = 1)"
"1",""
"1"," "
"1","10 % done"
"1",""
"1"," "
"1","20 % done"
"1",""
"1"," "
"1","30 % done"
"1",""
"1"," "
"1","40 % done"
"1",""
"1"," "
"1","50 % done"
"1",""
"1"," "
"1","60 % done"
"1",""
"1"," "
"1","70 % done"
"1",""
"1"," "
"1","80 % done"
"1",""
"1"," "
"1","90 % done"
"1",""
"1"," "
"1","100 % done"
